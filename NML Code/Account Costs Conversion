@@ [sqlite_query(Game, select XP from Accounts where Email='[get(%#/dat`account)]')]


@@ LP needs to be changed
@@ &CMD`PRIMARYROLLER #2082
@@ &CMD`PRIMARYCOMBAT #2082
@@ &FUNC`MISSIONSUCCESS #2082

@@ NEW
@@ %q0 - Player ; %q1 - KP Cost ; %q2 - XP Cost ; %q3 - Jutsu ID ; %q4 - XP in Account
&CMD`STAFFJUTSUAPPROVE #1215=$+JutsuApps/Approve *:@assert [hasslabs(%#,staff-skill)]={@pemit %#=[prompt(App)] You are not permitted to use this command.}; @assert [t([setr(0, [pmatch(%0)])])]={@pemit %#=[prompt(Game)] Invalid player.}; @assert [match(get(#1215/List`JutsuApps), %q0)]={@pemit %#=[prompt(Game)] That person doesn't have an app in the queue.}; @assert [gte([setr(4, [sqlite_query(Game, select XP from Accounts where Email='[get(%q0/dat`account)]')])], [setr(2, [if([hasattr(%q0/dat`NPC)], 0, [u(fn`JutsuXPCost_discount, %q0)])])])]={@pemit %#=[prompt(app)] [ansi(hy, [cname(%q0)])] (%q0) does not have enough XP to make this jutsu.; @pemit %q0=[prompt(App)] You do not have enough XP for your jutsu application at this time.}; @eval [setq(1, [if([hasattr(%q0/dat`NPC)], 0, [u(fn`jutsuKPCost_discounted, %q0)])])]; @skip/ifelse [!eq([get(%q0/dat`KP-jutsu)], %q1)]={@assert [gte([add([get(%q0/dat`KP)], [get(%q0/dat`KP-jutsu)], [mul(-1, %q1)])], 0)]={@pemit %#=[prompt(Game)] [ansi(y, [name(%q0)])] (%q0) does not have enough KP.}; @set %q0=dat`KP:[min([switch(1, [t([match([get(%q0/dat`flaws)], Inept)])], 10, [t([match([get(%q0/dat`Merits)], Gifted)])], 15, 12)], [add([get(%q0/dat`KP)], [get(%q0/dat`KP-jutsu)], [mul(-1, %q1)])])]}; @assert [hasattr(%q0/dat`jutsuapproval)]={@set %q0=dat`jutsuapproval:%#; @cemit monitor-app={[prompt(App)] [ansi(hc, %K)] has approved [ansi(hy,[name(*%0)])]'s Jutsu. They need one more staff member to approve them.}}; @assert [!strmatch(%#, [get(%q0/dat`jutsuapproval)])]={@pemit %#=[prompt(App)] You can't approve them again. Ask some other staff member to do this.}; @eval [setq(3, [u(#1215/fn`jutsu-create, %q0)])]; @cemit monitor-app={The jutsu "[elements(get(%q0/dat`jutsuapp),1,|)]" has been approved for [ansi(hm, [cname(%q0)])] by %K and [cname([get(%q0/dat`jutsuapproval)])]. There are [sub(words(get(#1215/List`JutsuApps)),1)] remaining in queue.}; @pemit %q0=[prompt(App)] Your application for the "[elements(get(%q0/dat`jutsuapp),1,|)]" jutsu has been approved. %q2 XP has been deducted.; @eval [set(%q0, dat`XP-spent:[add([get(%q0/dat`XP-spent)], %q2)])][sqlite_query(Game, update Accounts set XP=[sub(%q4, %q2)] where Email='[get(%q0/dat`account)]')]; @set #1215=List`JutsuApps:[remove([get(#1215/List`JutsuApps)],%q0)]; @wipe %q0/dat`jutsuapproval; @wipe %q0/dat`jutsuapp; @wipe %q0/dat`KP-jutsu

&CMD`TFAPPSUBMIT #1215=$+App/TF Submit:@assert [!match([v(list`TFApps)], %#)]={@pemit %#=[prompt(App)] You already have a TF App in the queue.}; @break [t([sqlite_query(Game, Select Name from Transformations where Name LIKE "[setr(0, [elements([get(%#/dat`TFApp)], 1, |)])]")])]={@pemit %#=[prompt(App)] The %q0 Transformation already exists.}; @assert gte([setr(4, [sqlite_query(Game, select XP from Accounts where Email='[get(%q0/dat`account)]')])],[if(hasattr(%#/dat`NPC), 0, 10000)])={@pemit %#=[prompt(App)] You need 10,000 XP to purchase a Transformation.} ;@assert gte(get(%#/Dat`KP),[setr(1, [if(hasattr(%#/dat`NPC), 0, 8)])])={@pemit %#=[prompt(App)] You need 8 KP to purchase a Transformation.} ; @assert [eq(5, [ladd([extract([get(%#/dat`TFApp)], 3, 12, |)], |)])]={@pemit %#=[prompt(App)] You must have exactly 5 TF Slots used.}; @assert [and([t(%q0)], [t([elementsmux([get(%#/dat`TFApp)], 2, |)])], [t([elementsmux([get(%#/dat`TFApp)], 15, |)])])]={@pemit %#=[prompt(Game)] You do not have the Name, Clan, and/or Description Fields filled out.}; @pemit %#={[prompt(App)] Your application for the "%q0" Transformation has been submitted. Please wait up to 72 hours for a response.}; @cemit Monitor-app=[ansi(y, %N)] has submitted a TF for approval.; @eval [if([!hasattr(%#/dat`KP-TF)], [set(%#, dat`KP:[sub([get(%#/dat`KP)], %q1)])][set(%#, dat`KP-TF:%q1)])][set(#1215, list`TFApps:[get(#1215/list`TFApps)] %#)]


@@ %q0 - Player ; %q1 - TF Name ; %q2 - XP Cost ; %q3 - XP in Account ; %q4 - SQLite Query
&CMD`STAFFTFAPPROVE #1215=$+TFApps/approve *:@assert hasslabs(%#,staff-skill)={@pemit %#=[Prompt(System)] You are not permitted to use this command.}; @assert [t([setr(0, [pmatch([secure(%0)])])])]={@pemit %#=[prompt(game)] [secure(%0)] is not a player.}; @assert [match(get(#1215/List`TFApps),%q0)]={@pemit %#=[prompt(Game)] [name(%q0)] does not have a TF app in the queue.}; @assert [gte([setr(3, [sqlite_query(Game, select XP from Accounts where Email='[get(%q0/dat`account)]')])], [setr(2, [if(hasattr(%q0/dat`NPC), 0, 10000)])])]={@pemit %#=[prompt(App)] [ansi(y, [name(%q0)] doesn't have enough XP for a new TF.}; @assert [!t([sqlite_query(Game, select Name from Transformations where Name LIKE "[setr(1, [elementsmux([get(%q0/dat`TFApp)], 1, |)])]")])]={@pemit %#=[prompt(Staff)] The "%q1" Transformation already exists in the Database.}; @assert [hasattr(%q0/dat`TFapproval)]={@set %q0=dat`TFapproval:%#; @cemit monitor-app={[prompt(App)] [ansi(hc, %K)] has approved [ansi(hy,[name(%q0)])]'s Transformation. They need one more staff member to approve them.}}; @assert [!strmatch(%#, [get(%q0/dat`TFapproval)])]={@pemit %#=[prompt(App)] You can't approve them again. Ask some other staff member to do this.}; @eval [setq(4, Insert into Transformations [chr(40)][iter([get(#1215/list`TF-SQLCols)], ##,|,[chr(44)])][chr(41)] values [chr(40)][iter([get(#1215/list`TF-SQL)], "[if([lte(1, #@, 12)], [if([elementsmux([get(%q0/dat`TFApp)], ##, |)], Yes, No)], [elementsmux([get(%q0/dat`TFApp)], ##, |)])]",,[chr(44)])][chr(41)])][sqlite_query(Game, %q4)]; @cemit Monitor-App=[prompt(App)] The Transformation "%q1" has been approved by %K and [cname([get(%q0/dat`TFapproval)])] for [ansi(y, [name(%q0)])]. There are [sub(words(get(#1215/List`TFApps),|),1)] remaining in queue.; @pemit %q0=[prompt(Game)] Your application for the "%q1" Transformation has been approved.;@eval [set(%q0, dat`XP-spent:[add([get(%q0/dat`XP-spent)], %q2)])][sqlite_query(Game, update Accounts set XP=[sub(%q3, %q2)] where Email='[get(%q0/dat`Account)]')]; @wipe %q0/dat`TFApp; @set #1215=List`TFApps:[remove([get(#1215/List`TFApps)], %q0)]; @set %q0=dat`TFList:[setunion([get(%q0/dat`TFList)], %q1, |)]; @wipe %q0/dat`TFApproval; @wipe %q0/dat`KP-TF

&CMD`CLANTF #1215=$+ClanTF:@assert [match([v(list`ClanTF-clans)], [get(%#/dat`Clan)], |)]={@pemit %#=[prompt(Game)] Your clan does not have a Transformation.}; @assert [!match([get(%#/dat`TFList)], [setr(0, [elements([get(#1215/list`ClanTF-TFs)], [match([get(#1215/list`ClanTF-clans)], [get(%#/dat`clan)], |)], |)])], |)]={@pemit %#=[prompt(Game)] You have already unlocked your Clan's Transformation.}; @assert [gte([setr(3, [sqlite_query(Game, select XP from Accounts where Email='[get(%#/dat`account)]')])], [setr(2, [if([hasattr(%#/dat`NPC)], 0, 10000)])])]={@pemit %#=[prompt(Game)] You do not have enough XP (%q2) to purchase the "%q0" Transformation.}; @assert [gte([get(%#/dat`KP)], [setr(1, [if([hasattr(%#/dat`NPC)], 0, [sub(8, [after([grab(%#/dat`ExpertiseList, Elite Tradition*, |)],^)])])])])]={@pemit %#=[prompt(Game)] You do not have enough KP (%q1) to purchase a TF.}; @set %#=dat`TFList:[setunion([get(%#/dat`TFList)], %q0, |)]; @eval [set(%#, dat`XP-spent:[add([get(%#/dat`XP-spent)], %q2)])][sqlite_query(Game, update Accounts set XP=[sub(%q3, %q2)] where Email='[get(%#/dat`account)]')]; @set %#=dat`KP:[sub([get(%#/dat`KP)], %q1)]; @pemit %#={[prompt(Game)] You have purchased your clan's Transformation (%q0) for %q2 XP and %q1 KP. You have [sqlite_query(Game, select XP from Accounts where Email='[get(%#/dat`account)]')] XP and [get(%#/dat`KP)] KP left.}; @remit %L=[prompt(Game)] %N awakens the potential of their Clan!; @cemit Monitor-App=[if([hasattr(%#/dat`NPC)], [ansi(hm, [chr(40)][get(%#/dat`NPC)][chr(41)])%b])][ansi(hy, %N)] (%#) purchased their Clan TF (%q0) for %q2 XP and %q1 KP.


&CMD`STATBUY #1215=$+buy/stat *:@assert [hasattr(%#/dat`Approval)]={@pemit %#=[prompt(Game)] Please complete CG before buying stats.}; @break [member([get(%l/list`players)],%#)]={@pemit %#=%r%r[prompt(App)] You cannot purchase things while in Order.%r};@assert [setr(0, [match(get(#244/Dat`PrimaryStats),%0,|)])]={@pemit %#=[Prompt(App)] [caplist(%0)] is not a Primary Stat.};@assert [lt([elements([get(%#/dat`PrimaryStats)], %q0, |)], [add(9, -[t([match([get(%#/dat`Flaws)], Inferior %0, |)])], [or([match([get(%#/dat`Merits)], Greater %0, |)], [match([get(%#/dat`Merits)], Genius, |)])])])]={@pemit %#=[Prompt(App)] [capstr([lcstr(%0)])] cannot be raised further.}; @assert [gte([get(%#/dat`KP)], [setr(1, [if([hasattr(%#/Dat`NPC)], 0, [max(sub(3,[after(grab(get(%#/Dat`ExpertiseList),Elite Tradition*,|),^)]),1)])])])]={@pemit %#=[prompt(app)] You require at least %q1 KP to raise a stat.}; @assert gte([setr(3, [sqlite_query(Game, select XP from Accounts where Email='[get(%#/dat`Account)]')])], [setr(2, [if([hasattr(%#/Dat`NPC)],0,switch(get(%#/Dat`Tier),0,250,1,500,2,750,3,1000,4,1500,5,2000,6,2500,7,3500,8,5000))])])={@pemit %#=[Prompt(App)] You need %q2 XP to raise a stat.}; @set %#=Dat`PrimaryStats:[replace([get(%#/dat`PrimaryStats)], %q0, [inc([elements([get(%#/dat`PrimaryStats)], %q0, |)])], |)]; @set %#=Dat`KP:[sub([get(%#/dat`KP)], %q1)]; @eval [set(%#, dat`XP-spent:[add([get(%#/dat`XP-spent)], %q2)])][sqlite_query(Game, update Accounts set XP=[sub(%q3, %q2)] where Email='[get(%#/dat`Account)]')]; @pemit %#={[prompt(app)] [elements([get(#244/dat`PrimaryStats)], %q0, |)] has been raised to [elements([get(%#/dat`PrimaryStats)], %q0, |)] for %q2 XP and %q1 KP. You have [sqlite_query(Game, select XP from Accounts where Email='[get(%#/dat`account)]')] XP and [get(%#/dat`KP)] KP remaining.}; @skip/ifelse [match(17 25 33 41 49 57 65 73, [ladd([get(%#/dat`PrimaryStats)], |)])]={@set %#=dat`Tier:[match(17 25 33 41 49 57 65 73, [ladd([get(%#/dat`PrimaryStats)], |)])]; @pemit %#={[prompt(Game)] Your tier has increased to Tier [get(%#/dat`Tier)].}; {@eval [switch(1, [lte(1, [get(%#/dat`Tier)], 2)], [setq(2, 3)][setq(3, 3)], [lte(3, [get(%#/dat`Tier)], 4)], [setq(2, 2)][setq(3, 2)], [lte(5, [get(%#/dat`tier)], 6)], [setq(2, 1)][setq(3, 1)], [gte(7, [get(%#/dat`tier)])], [setq(2, 0)][setq(3, 0)])]}; @wait 0={@set %#=dat`SpecialtySlots:[add([get(%#/dat`SpecialtySlots)], %q2)]; @set %#=Dat`ExpertiseSlots:[add([get(%#/dat`ExpertiseSlots)], %q3)]; @pemit %#=[prompt(Game)] You have gained %q2 Specialty Slots and %q3 Expertise Slots.}}; @eval [u(#245/func`Refresh)]; @cemit Monitor-App= [ansi(hm, %N)] %(%#%) has increased their [capstr([lcstr(%0)])] Stat.

&CMD`PROFICIENCYAPP #1215=$+buy/proficiency *:@assert [hasattr(%#/dat`Approval)]={@pemit %#=[prompt(Game)] Please complete CG before buying Proficiency.}; @break [member([get(%l/list`players)],%#)]={@pemit %#=%r%r[prompt(App)] You cannot purchase things while in Order.%r};@assert hasattr(%#/[setr(0, Dat`JutsuAttributes`[edit(%0,%b,-)])])={@pemit %#=[Prompt(App)] [caplist(%0)] is not a jutsu you have.};@assert [lt([elementsmux([get(%#/%q0)], 14, |)], 6)]={@pemit %#=[Prompt(App)] [capstr([lcstr(%0)])] cannot be raised further.}; @assert [gte([get(%#/dat`KP)], [setr(1, [if([hasattr(%#/Dat`NPC)], 0, [max(sub(3,[after(grab(get(%#/Dat`ExpertiseList),Elite Tradition*,|),^)]),1)])])])]={@pemit %#=[prompt(app)] You require at least %q1 KP to raise Proficiency.}; @assert gte([setr(3, [sqlite_query(Game, select XP from Accounts where Email='[get(%#/dat`Account)]')])], [setr(2, [if([hasattr(%#/Dat`NPC)],0,[mul(1000, [elementsmux([get(%#/%q0)], 14, |)])])])])={@pemit %#=[Prompt(App)] You need %q2 XP to raise a proficiency.}; @set %#=%q0:[replace(get(%#/%q0),14,[add([elementsmux(get(%#/%q0),14,|)],1)],|)]; @eval [set(%#, dat`XP-spent:[add([get(%#/dat`XP-spent)], %q2)])][sqlite_query(Game, update Accounts set XP=[sub(%q3, %q2)] where Email='[get(%#/dat`account)]')]; @set %#=Dat`KP:[sub(get(%#/Dat`KP), %q1)]; @set %#=%q0:[replace(get(%#/%q0),15,[add([elementsmux(get(%#/%q0),15,|)],[switch([elementsmux(get(%#/%q0),14,1,|)],2,4,3,4,4,5,5,5,6,6)])],|)]; @set %#=%q0:[replace(get(%#/%q0),16,[add([elementsmux(get(%#/%q0),16,|)],%q2)],|)]; @pemit %#=[prompt(Game)] You have increased the Jutsu Proficiency Level of [caplist(%0)] to [elementsmux(get(%#/%q0),14,|)], raising the amount of available Jutsu Mastery Points to [elementsmux(get(%#/%q0),15,|)] for %q2 XP and %q1 KP. [sqlite_query(Game, select XP from Accounts where Email='[get(%#/dat`account)]')] XP, and [get(%#/Dat`KP)] KP remain. ;@cemit monitor-app=[prompt(App)] %N has increased the Proficiency Level of their [caplist(%0,,,L)] jutsu to [elementsmux(get(%#/%q0),14,|)].

&CMD`RPSKILL #1215=$+buy/RPskill *:@assert [hasattr(%#/dat`Approval)]={@pemit %#=[prompt(Game)] Please complete CG before buying RP Skills.}; @break [member([get(%l/list`players)],%#)]={@pemit %#=%r%r[prompt(App)] You cannot purchase things while in Order.%r}; @assert [setr(0, [match([get(#244/dat`RPskills)], [secure(%0)], |)])]={@pemit %#=[prompt(App)] That is not a proper RP Skill.}; @assert elementsmux([get(%#/dat`RPSkills)], %q0, |)={@pemit %#=[Prompt(App)] [elementsmux([get(#244/dat`RPskills)], %q0, |)] is not an RP Skill you have.};@assert [lt([elementsmux([get(%#/dat`RPSkills)], %q0, |)], 10)]={@pemit %#=[Prompt(App)] [elementsmux([get(#244/dat`RPskills)], %q0, |)] cannot be raised further.}; @assert [gte([get(%#/dat`KP)], [setr(1, [if([hasattr(%#/Dat`NPC)], 0, [max(sub(2,[after(grab(get(%#/Dat`ExpertiseList),Elite Tradition*,|),^)]),1)])])])]={@pemit %#=[prompt(app)] You require at least %q1 KP to raise an RP Skill.}; @assert gte([setr(3, [sqlite_query(Game, select XP from Accounts where Email='[get(%#/dat`Account)]')])], [setr(2, [if([hasattr(%#/Dat`NPC)],0,1000)])])={@pemit %#=[Prompt(App)] You need %q2 XP to raise an RP Skill.}; @set %#=Dat`RPSkills:[replace(get(%#/Dat`RPSKills),%q0,[add([elementsmux(get(%#/Dat`RPSKills),%q0,|)],1)],|)]; @eval [set(%#, dat`XP-spent:[add([get(%#/dat`XP-spent)], %q2)])][sqlite_query(Game, update Accounts set XP=[sub(%q3, %q2)] where Email='[get(%#/dat`account)]')]; @set %#=Dat`KP:[sub(get(%#/Dat`KP), %q1)]; @pemit %#=[prompt(App)] You have successfully increased your [elementsmux([get(#244/dat`RPSkills)], %q0, |)] RP Skill to [elementsmux([get(%#/dat`RPSkills)], %q0, |)]! You have [sqlite_query(Game, select XP from Accounts where Email='[get(%#/dat`account)]')] XP and [get(%#/Dat`KP)] KP remaining.; @cemit monitor-app=[prompt(App)] %N has increased their [elementsmux(get(#244/dat`RPskills), %q0, |)] RP Skill to [elementsmux(get(%#/Dat`RPSKills),%q0,|)].


&CMD`SPECSLOTEXPANSION #1215=$+buy/slot specialty:@assert [hasattr(%#/dat`Approval)]={@pemit %#=[prompt(Game)] Please complete CG before buying Specialty Slots.}; @break [member([get(%l/list`players)],%#)]={@pemit %#=%r%r[prompt(App)] You cannot purchase things while in Order.%r}; @assert [gt(8, [elements([get(%#/dat`SlotExpansion)], 1, |)])]={@pemit %#=[prompt(Game)] You have already purchased the maximum number of specialty slots.}; @assert [gte([get(%#/dat`KP)], [setr(1, [if([hasattr(%#/Dat`NPC)], 0, 10)])])]={@pemit %#=[prompt(app)] You require at least %q1 KP to buy a Specialty Slot.}; @assert gte([setr(3, [sqlite_query(Game, select XP from Accounts where Email='[get(%#/dat`Account)]')])], [setr(2, [if([hasattr(%#/Dat`NPC)],0,6500)])])={@pemit %#=[Prompt(App)] You need %q2 XP to buy a Specialty Slot.}; @set %#=dat`SpecialtySlots:[inc([get(%#/dat`SpecialtySlots)])]; @set %#=dat`slotexpansion:[replace([get(%#/dat`slotexpansion)], 1, [inc([elements([get(%#/dat`slotexpansion)], 1, |)])], |)]; @eval [set(%#, dat`XP-spent:[add([get(%#/dat`XP-spent)], %q2)])][sqlite_query(Game, update Accounts set XP=[sub(%q3, %q2)] where Email='[get(%#/dat`account)]')]; @set %#=Dat`KP:[sub(get(%#/Dat`KP), %q1)]; @pemit %#={[prompt(App)] You have purchased a Specialty Slot Expansion upgrade for your character! You have received an extra Specialty Slot for %q2 XP and %q1 KP. You have [sub(8, [elements([get(%#/dat`SlotExpansion)], 1, |)])] slots remaining to purchase.}; @cemit Monitor-App=[ansi(hm, %N)] has purchased an extra Specialty Slot for [ansi(hy, %q2)] XP and [ansi(hy, %q1)] KP. %S has [sub(8, [elements([get(%#/dat`SlotExpansion)], 1, |)])] Slots remaining.


&CMD`EXPERTSLOTEXPANSION #1215=$+buy/slot expertise:@assert [hasattr(%#/dat`Approval)]={@pemit %#=[prompt(Game)] Please complete CG before buying Expertise Slots.}; @break [member([get(%l/list`players)],%#)]={@pemit %#=%r%r[prompt(App)] You cannot purchase things while in Order.%r}; @assert [gt(4, [elements([get(%#/dat`SlotExpansion)], 2, |)])]={@pemit %#=[prompt(Game)] You have already purchased the maximum number of expertise slots.}; @assert [gte([get(%#/dat`KP)], [setr(1, [if([hasattr(%#/Dat`NPC)], 0, 10)])])]={@pemit %#=[prompt(app)] You require at least %q1 KP to buy a Expertise Slot.}; @assert gte([setr(3, [sqlite_query(Game, select XP from Accounts where Email='[get(%#/dat`Account)]')])], [setr(2, [if([hasattr(%#/Dat`NPC)],0,6500)])])={@pemit %#=[Prompt(App)] You need %q2 XP to buy a Expertise Slot.}; @set %#=dat`ExpertiseSlots:[inc([get(%#/dat`ExpertiseSlots)])]; @set %#=dat`slotexpansion:[replace([get(%#/dat`slotexpansion)], 2, [inc([elements([get(%#/dat`slotexpansion)], 2, |)])], |)]; @eval [set(%#, dat`XP-spent:[add([get(%#/dat`XP-spent)], %q2)])][sqlite_query(Game, update Accounts set XP=[sub(%q3, %q2)] where Email='[get(%#/dat`account)]')]; @set %#=Dat`KP:[sub(get(%#/Dat`KP), %q1)]; @pemit %#={[prompt(App)] You have purchased a Expertise Slot Expansion upgrade for your character! You have received an extra Expertise Slot for %q2 XP and %q1 KP. You have [sub(4, [elements([get(%#/dat`SlotExpansion)], 2, |)])] slots remaining to purchase.}; @cemit Monitor-App=[ansi(hm, %N)] has purchased an extra Expertise Slot for [ansi(hy, %q2)] XP and [ansi(hy, %q1)] KP. %S has [sub(4, [elements([get(%#/dat`SlotExpansion)], 2, |)])] Slots remaining.

&CMD`TFRANK #1215=$+TFRank *:@assert [t([setr(0, grab(get(%#/Dat`TFList),[secure(%0)],|))])]={@pemit %#=[prompt(Game)] You do not possess the [caplist([secure(%0)],,,l)] Transformation.};@assert lt(get(%#/Dat`TFRank`[setr(4, [edit(%q0,%b,-)])]),3)={@pemit %#=[prompt(Game)] Your %q0 Transformation is already at the maximum rank ([get(%#/Dat`TFRank`%q4)]).}; @assert [gte([get(%#/dat`KP)], [setr(1, [if([hasattr(%#/Dat`NPC)], 0, [max(1, [sub(10, [after([grab([get(%#/dat`ExpertiseList)], Elite Tradition*, |)], ^)])])])])])]={@pemit %#=[prompt(app)] You require at least %q1 KP to buy a TF Rank.}; @assert gte([setr(3, [sqlite_query(Game, select XP from Accounts where Email='[get(%#/dat`Account)]')])], [setr(2, [if([hasattr(%#/Dat`NPC)],0, 5000)])])={@pemit %#=[Prompt(App)] You need %q2 XP to buy a Expertise Slot.}; @eval [set(%#, dat`XP-spent:[add([get(%#/dat`XP-spent)], %q2)])][sqlite_query(Game, update Accounts set XP=[sub(%q3, %q2)] where Email='[get(%#/dat`account)]')]; @set %#=Dat`KP:[sub(get(%#/Dat`KP), %q1)]; @eval [set(%#,Dat`TFRank`%q4:[inc([get(%#/Dat`TFRank`%q4)])])]; @pemit %#=[prompt(Game)] You have increased your %q0 Transformation to Rank [get(%#/Dat`TFRank`%q4)] for %q2 XP and %q1 KP!


@@ +instruct Jutsu = Player ; %q0 - Player ; %q1 - Jutsu Attribute ; %q2 - Jutsu ID
&CMD`INSTRUCT #1215=$+instruct *=*:@assert [t([setr(0, [pmatch(%1)])])]={@pemit %#=[prompt(Game)] That is not a valid player.}; @assert nearby(%#,%q0)={@pemit %#=[prompt(Game)] The character you are trying to instruct is not present in the room.}; @assert hasattr(%#/[setr(4, Dat`JutsuAttributes`[edit([secure(%0)],%b,-)])])={@pemit %#=[prompt(Game)] You do not possess the [caplist([secure(%0)],,,L)] jutsu.};@assert !hasattr(%q0/%q1)={@pemit %#=[prompt(Game)] [name(%q0)] already possesses the [elementsmux([get(%#/%q1)], 8, |)] jutsu.}; @assert gte(get(%q0/Dat`KP),[if([hasattr(%q0/dat`NPC)], 0, [switch([sqlite_query(Game, Select Rank From Templates Where ID=[setr(2, [extract(get(%#/%q1),7,1,|)])])],E,2,D,3,C,4,B,6,A,7,S,8)])])={@pemit %#=[prompt(Game)] [name(%q0)] does not have enough KP to learn the [elementsmux([get(%#/%q1)], 8, |)] jutsu from you at this time.}; @assert gte([sqlite_query(Game, select XP from Accounts where Email='[get(%q0/dat`account)]')], [floor(mul(add([sqlite_query(Game, Select XP From Templates Where ID=%q2)],	[elementsmux(0 1000 3000 6000 10000 15000, [elementsmux(get(%#/%q1),14,|)])]), sub(1, [if([or([and([match(get(%q0/Dat`AffinityList),sqlite_query(Game, Select Type From Templates Where ID=%q2),|)],[match(Ninjutsu|Nintaijutsu|Chakra Flow Taijutsu|Chakra Flow Bukijutsu,[sqlite_query(Game, Select Archetype From Templates Where ID=%q2)],|)])], [and([match(get(%q0/Dat`AffinityList),Yang,|)],[match(Taijutsu|Bukijutsu,[sqlite_query(Game, Select Archetype From Templates Where ID=%q2)],|)])], [and([match(get([pmatch(%1)]/Dat`AffinityList),Yin,|)],[match(Seals|Calligraphy,sqlite_query(Game, Select Archetype From Templates Where ID=%q2),|)])])], .25, 0)], [if([match([get(%#/dat`Students)], %q0)], .1, 0)], [if([match([get(%q0/dat`ExpertiseList)], Elite Tradition*, |)], .05, 0)])))])={@pemit %#=[prompt(Game)] [name(%q0)] does not have enough XP to learn the [caplist(%0,,,L)] jutsu from you at this time.}; @assert [u(#1215/Func`ExpertSpecCon,[elementsmux([get(%#/%q1)], 8, |)],%q0)]={@pemit %#=[prompt(Game)] [name(%q0)] does not have the Specialties training necessary to be taught the [elementsmux([get(%#/%q1)], 8, |)] jutsu at this time.}; @assert [match(General Hiden [get(%q0/dat`Clan)], [elementsmux([get(%#/%q1)], 10, |)])]={@pemit %#=[prompt(Game)] [name(%q0)] is not part of a clan capable of learning this jutsu.}; @pemit %#=[prompt(game)] You have offered to instruct [ansi(y, [name(%q0)])] in the usage of the [elementsmux([get(%#/%q1)], 8, |)] jutsu.;@pemit %q0=[prompt(game)] [ansi(c, %N)] wants to instruct you in thier [ansi(hy,[elementsmux([get(%#/%q1)], 8, |)])] Jutsu. %r%rType [ansi(hg, +lesson/review)] to look at the jutsu being offered and its costs. Type [ansi(hg, +lesson/accept)] or [ansi(hg, +lesson/decline)] to accept or decline the jutsu instruction.;&dat`Jutsushower %q0=%#|[elementsmux([get(%#/%q1)], 8, |)]

&CMD`INSTRUCT-RESPONSE #1215=$^\+lesson/(accept|decline)$:@assert [hasattr(%#, dat`jutsushower)]={@pemit %#=[prompt(game)] No one is attempting to instruct you in a jutsu.}; @break [strmatch(%1, accept)]={@pemit [before(get(%#/Dat`JutsuShower),|)]=[prompt(game)] [ansi(y, [cname(%#)])] has accepted the instruction in your [after(get(%#/Dat`JutsuShower),|)] jutsu.; @pemit %#=[prompt(Game)] You have accepted instruction in [ansi(c,cname(before(get(%#/Dat`JutsuShower),|)))]'s [after(get(%#/Dat`JutsuShower),|)] jutsu for [setr(2, [if([hasattr(%#/dat`NPC)], 0, [u(#1215/Func`InstructXpCost,[before(get(%#/Dat`JutsuShower),|)],[after(get(%#/Dat`JutsuShower),|)])])])] XP and [setr(1, [if([hasattr(%#/dat`NPC)], 0, [switch([sqlite_query(Game, Select Rank From Templates Where ID=[before([get(%#/dat`JutsuShower)], |)]/Dat`JutsuAttributes`[edit([after(get(%#/Dat`JutsuShower),|)],%b,-)])],E,2,D,3,C,4,B,6,A,7,S,8)])] KP.;@cpattr [before([get(%#/dat`JutsuShower)], |)]/Dat`JutsuAttributes`[edit([after([get(%#/dat`JutsuShower)], |)], %b, -)]; @eval [set(%#, dat`XP-spent:[add([get(%#/dat`XP-spent)], %q2)])][set(%#, dat`JutsuAttributes`[edit([after([get(%#/dat`JutsuShower)], |)], %b, -)]:[replace([get(%#/dat`JutsuAttributes`[edit([after([get(%#/dat`JutsuShower)], |)], %b, -)])], 16, %q2, |)])][sqlite_query(Game, update Accounts set XP=[sub([sqlite_query(Game, select XP from Accounts where Email='[get(%#/dat`account)]')], %q2)] where Email='[get(%#/dat`Account)]')]; @set %#=Dat`KP:[sub(get(%#/Dat`KP),%q1)];&dat`jutsushower %#=}; @pemit %#=[prompt(game)] You have [ansi(r, declined)] to learn [ansi(c, [name([before(get(%#/Dat`JutsuShower),|)])])]'s [after(get(%#/Dat`JutsuShower),|)] jutsu.; @pemit [before(get(%#/Dat`JutsuShower),|)]=[prompt(game)] [ansi(y, %N)] has [ansi(r, declined)] to learn your [after(get(%#/Dat`JutsuShower),|)] jutsu.;&dat`jutsushower %#=};


@@ %q0 - Attribute Name ; %q1 - Jutsu Name ; %q2 - XP Regained
&CMD`FORGETJUTSU #1215=$+Jutsu/forget *:@assert hasattr(%#/[setr(0, Dat`JutsuAttributes`[edit(%0,%b,-)])])={@pemit %#=[prompt(Game)] You do not possess that jutsu.};@break match(get(%#/Dat`CopyList),[setr(1, [elementsmux(get(%#/%q0),8,|)])],|)={[prompt(Game)] You cannot forget a jutsu that is merely a copy.};@eval [sqlite_query(Game, update Accounts set XP=[add([sqlite_query(Game, select XP from Accounts where Email='[get(%#/dat`account)]')], [setr(2, [elementsmux([get(%#/%q0)], 16, |)])])] where Email='[get(%#/dat`Account)]')][set(%#, dat`XP-spent:[sub([get(%#/dat`XP-spent)], %q2)])]; @pemit %#=[prompt(Game)] You have forgotten the %q1 jutsu, recovering %q2 XP and removing the jutsu from your character. ; @wipe %#/%q0 ; @cemit monitor-app=%N has forgotten the %q1 jutsu, recovering %q2 XP and removing the jutsu from their character.

@@ %q0 - TF Name ; %q2 - XP Recovered
&CMD`FORGETTF #1215=$+TF/forget *:@assert [t([setr(0, [grab(get(%#/Dat`TFList),%0,|)])])]={@pemit %#=[prompt(Game)] You do not possess that Transformation.}; @eval [sqlite_query(Game, update Accounts set XP=[add([sqlite_query(Game, select XP from Accounts where Email='[get(%#/dat`account)]')], [setr(2,[if(hasattr(%#/Dat`NPC),0,[add(10000, [elementsmux(5000 10000 15000, [get(%#/dat`TFRank`[edit(%q0, %b, -)])])])])])])] where Email='[get(%#/dat`account)]')][set(%#, dat`XP-spent:[sub([get(%#/dat`XP-spent)], %q2)])]; @pemit %#=[prompt(Game)] You have forgotten the %q0 Transformation, recovering %q2 XP and removing the Transformation from your character.; @set %#=Dat`TFList:[remove(get(%#/Dat`TFlist),%q0,|)]; @cemit monitor-app= [prompt(Forget)] %N has forgotten the %q0 Transformation, recovering %q2 XP and removing the Transformation from their character.

@@ %q0 - Attribute Name ; %q1 - KP Cost ; %q2 - XP Cost ; %q3 Jutsu Name
&CMD`RETAIN #1215=$+Retain *:@assert match(get(%#/Dat`TFList),Sharingan,|)={@pemit %#=[prompt(Game)] You are not capable of retaining copied jutsu.}; @assert [t([setr(0, Dat`JutsuAttributes`[setr(3, [grab(get(%#/Dat`Copylist),[secure(%0)],|)])])])]={@pemit %#=[prompt(Game)] You do not have that jutsu copied.}; @assert gte([sqlite_query(Game, select XP from Accounts where Email='[get(%#/dat`account)]')],[setr(2, [add(sqlite_query(Game, Select XP From Templates Where ID=[extract(get(%#/%q0),7,1,|)]),[elementsmux(0 1000 3000 6000 10000 15000, [elementsmux([get(%#/%q0)], 14, |)])])])])={@pemit %#=[prompt(Game)] You do not have enough XP (%q2) to retain the %q1 jutsu.}; @assert gte(get(%#/Dat`KP),[setr(1, [max(sub(switch([sqlite_query(Game, Select Rank From Templates Where ID=[elementsmux(get(%#/%q0),7,|)])],E,2,D,3,C,4,B,6,A,7,S,8),[after(grab(get(%#/Dat`ExpertiseList), Elite Tradition*, |), ^)]),1)])])={@pemit %#= [prompt(Game)] You do not have enough KP %(%q1%) to retain the %q3 jutsu.}; @eval [set(%#, dat`XP-spent:[add([get(%#/dat`XP-spent)], %q2)])][set(%#, %q0:[replace([get(%#/%q0)], 16, %q2, |)])][sqlite_query(Game, update Accounts set XP=[sub([sqlite_query(Game, select XP from Accounts where Email='[get(%#/dat`account)]')], %q2)] where Email='[get(%#/dat`Account)]')]; @set %#=Dat`KP:[sub(get(%#/Dat`KP),%q1)]; @pemit %#=[prompt(Game)] You have chosen to retain the %q3 jutsu for %q2 XP and %q1 KP. You have [get(%#/Dat`XP)] XP and [get(%#/Dat`KP)] KP remaining. ; @cemit monitor-app=%N has chosen to retain the %q3 jutsu for %q2 XP and %q1 KP.; @set %#=Dat`CopyList:[remove(get(%#/Dat`Copylist),%q3,|)]


@@ OLD:
@@ &CMD`STAFFJUTSUAPPROVE #1215=$+JutsuApps/Approve *:@assert [hasslabs(%#,staff-skill)]={@pemit %#=[prompt(App)] You are not permitted to use this command.}; @assert [t([setr(0, [pmatch(%0)])])]={@pemit %#=[prompt(Game)] Invalid player.}; @assert [match(get(#1215/List`JutsuApps), %q0)]={@pemit %#=[prompt(Game)] That person doesn't have an app in the queue.}; @assert [gte([get(%q0/dat`XP)], [setr(2, [if([hasattr(%q0/dat`NPC)], 0, [u(fn`JutsuXPCost_discount, %q0)])])])]={@pemit %#=[prompt(app)] [ansi(hy, [cname(%q0)])] (%q0) does not have enough XP to make this jutsu.; @pemit %q0=[prompt(App)] You do not have enough XP for your jutsu application at this time.}; @assert [hasattr(%q0/dat`jutsuapproval)]={@set %q0=dat`jutsuapproval:%#; @cemit monitor-app={[prompt(App)] [ansi(hc, %K)] has approved [ansi(hy,[name(*%0)])]'s Jutsu. They need one more staff member to approve them.}}; @assert [!strmatch(%#, [get(%q0/dat`jutsuapproval)])]={@pemit %#=[prompt(App)] You can't approve them again. Ask some other staff member to do this.}; @eval [setq(1, [if([hasattr(%q0/dat`NPC)], 0, [u(fn`jutsuKPCost_discounted, %q0)])])]; @eval [setq(3, [u(#1215/fn`jutsu-create, %q0)])]; @cemit monitor-app={The jutsu "[elements(get(%q0/dat`jutsuapp),1,|)]" has been approved for [ansi(hm, [cname(%q0)])] by %K and [cname([get(%q0/dat`jutsuapproval)])]. There are [sub(words(get(#1215/List`JutsuApps)),1)] remaining in queue.}; @pemit %q0=[prompt(App)] Your application for the "[elements(get(%q0/dat`jutsuapp),1,|)]" jutsu has been approved. %q2 XP has been deducted.; @set %q0=dat`XP:[sub([get(%q0/dat`XP)], %q2)]; @set #1215=List`JutsuApps:[remove([get(#1215/List`JutsuApps)],%q0)]; @skip/ifelse [!eq([get(%q0/dat`KP-jutsu)], %q1)]={@set %q0=dat`KP:[min([switch(1, [t([match([get(%q0/dat`flaws)], Inept)])], 10, [t([match([get(%q0/dat`Merits)], Gifted)])], 15, 12)], [add([get(%q0/dat`KP)], [get(%q0/dat`KP-jutsu)], [mul(-1, %q1)])])]}; @wipe %q0/dat`jutsuapproval; @wipe %q0/dat`jutsuapp; @wipe %q0/dat`KP-jutsu

@@ &CMD`TFAPPSUBMIT #1215=$+App/TF Submit:@assert [!match([v(list`TFApps)], %#)]={@pemit %#=[prompt(App)] You already have a TF App in the queue.}; @break [t([sqlite_query(Game, Select Name from Transformations where Name LIKE "[setr(0, [elements([get(%#/dat`TFApp)], 1, |)])]")])]={@pemit %#=[prompt(App)] The %q0 Transformation already exists.}; @assert gte(get(%#/Dat`XP),[if(hasattr(%#/dat`NPC), 0, 10000)])={@pemit %#=[prompt(App)] You need 10,000 XP to purchase a Transformation.} ;@assert gte(get(%#/Dat`KP),[if(hasattr(%#/dat`NPC), 0, 8)])={@pemit %#=[prompt(App)] You need 8 KP to purchase a Transformation.} ; @assert [eq(5, [ladd([extract([get(%#/dat`TFApp)], 3, 12, |)], |)])]={@pemit %#=[prompt(App)] You must have exactly 5 TF Slots used.}; @assert [and([t(%q0)], [t([elementsmux([get(%#/dat`TFApp)], 2, |)])], [t([elementsmux([get(%#/dat`TFApp)], 15, |)])])]={@pemit %#=[prompt(Game)] You do not have the Name, Clan, and/or Description Fields filled out.}; @pemit %#={[prompt(App)] Your application for the "%q0" Transformation has been submitted. Please wait up to 72 hours for a response.}; @cemit Monitor-app=[ansi(y, %N)] has submitted a TF for approval.; @eval [setq(1, [if(hasattr(%#/dat`NPC), 0, 8)])][if([!hasattr(%#/dat`KP-TF)], [set(%#, dat`KP:[sub([get(%#/dat`KP)], %q1)])][set(%#, dat`KP-TF:%q1)])][set(#1215, list`TFApps:[get(#1215/list`TFApps)] %#)]

@@ &CMD`STAFFTFAPPROVE #1215=$+TFApps/approve *:@assert hasslabs(%#,staff-skill)={@pemit %#=[Prompt(System)] You are not permitted to use this command.}; @assert [t([setr(0, [pmatch([secure(%0)])])])]={@pemit %#=[prompt(game)] [secure(%0)] is not a player.}; @assert [match(get(#1215/List`TFApps),%q0)]={@pemit %#=[prompt(Game)] [name(%q0)] does not have a TF app in the queue.}; @assert [gte([get(%q0/dat`XP)], [setr(3, [if(hasattr(%q0/dat`NPC), 0, 10000)])])]={@pemit %#=[prompt(App)] [ansi(y, [name(%q0)] doesn't have enough XP for a new TF.}; @assert [!t([sqlite_query(Game, select Name from Transformations where Name LIKE "[setr(1, [elementsmux([get(%q0/dat`TFApp)], 1, |)])]")])]={@pemit %#=[prompt(Staff)] The "%q1" Transformation already exists in the Database.}; @assert [hasattr(%q0/dat`TFapproval)]={@set %q0=dat`TFapproval:%#; @cemit monitor-app={[prompt(App)] [ansi(hc, %K)] has approved [ansi(hy,[name(%q0)])]'s Transformation. They need one more staff member to approve them.}}; @assert [!strmatch(%#, [get(%q0/dat`TFapproval)])]={@pemit %#=[prompt(App)] You can't approve them again. Ask some other staff member to do this.}; @eval [setq(4, Insert into Transformations [chr(40)][iter([get(#1215/list`TF-SQLCols)], ##,|,[chr(44)])][chr(41)] values [chr(40)][iter([get(#1215/list`TF-SQL)], "[if([lte(1, #@, 12)], [if([elementsmux([get(%q0/dat`TFApp)], ##, |)], Yes, No)], [elementsmux([get(%q0/dat`TFApp)], ##, |)])]",,[chr(44)])][chr(41)])][sqlite_query(Game, %q4)]; @cemit Monitor-App=[prompt(App)] The Transformation "%q1" has been approved by %K and [cname([get(%q0/dat`TFapproval)])] for [ansi(y, [name(%q0)])]. There are [sub(words(get(#1215/List`TFApps),|),1)] remaining in queue.; @pemit %q0=[prompt(Game)] Your application for the "%q1" Transformation has been approved.;@set %q0=Dat`XP: [sub(get(%q0/Dat`XP), %q3)]; @wipe %q0/dat`TFApp; @set #1215=List`TFApps:[remove([get(#1215/List`TFApps)], %q0)]; @set %q0=dat`TFList:[setunion([get(%q0/dat`TFList)], %q1, |)]; @wipe %q0/dat`TFApproval; @wipe %q0/dat`KP-TF

@@ &CMD`CLANTF #1215=$+ClanTF:@assert [match([v(list`ClanTF-clans)], [get(%#/dat`Clan)], |)]={@pemit %#=[prompt(Game)] Your clan does not have a Transformation.}; @assert [!match([get(%#/dat`TFList)], [setr(0, [elements([get(#1215/list`ClanTF-TFs)], [match([get(#1215/list`ClanTF-clans)], [get(%#/dat`clan)], |)], |)])], |)]={@pemit %#=[prompt(Game)] You have already unlocked your Kekkei Genkai Transformation.}; @assert [gte([get(%#/dat`XP)], [setr(2, [if([hasattr(%#/dat`NPC)], 0, 10000)])])]={@pemit %#=[prompt(Game)] You do not have enough XP (%q0) to purchase your the "%q0" Transformation.}; @assert [gte([get(%#/dat`KP)], [setr(1, [if([hasattr(%#/dat`NPC)], 0, [sub(8, [after([grab(%#/dat`ExpertiseList, Elite Tradition*, |)],^)])])])])]={@pemit %#=[prompt(Game)] You do not have enough KP (%q1) to purchase a TF.}; @set %#=dat`TFList:[setunion([get(%#/dat`TFList)], %q0, |)]; @set %#=dat`XP:[sub([get(%#/dat`XP)], %q2)]; @set %#=dat`KP:[sub([get(%#/dat`KP)], %q1)]; @pemit %#={[prompt(Game)] You have purchased your clan's Transformation (%q0) for %q2 XP and %q1 KP. You have [get(%#/dat`XP)] XP and [get(%#/dat`KP)] KP left.}; @remit %L=[prompt(Game)] %N awakens the potential of their Clan!; @cemit Monitor-App=[if([hasattr(%#/dat`NPC)], [ansi(hm, [chr(40)][get(%#/dat`NPC)][chr(41)])%b])][ansi(hy, %N)] (%#) purchased their Clan TF (%q0) for %q2 XP and %q1 KP.

@@ &CMD`STATBUY #1215=$+buy/stat *:@assert [hasattr(%#/dat`Approval)]={@pemit %#=[prompt(Game)] Please complete CG before buying stats.}; @break [member([get(%l/list`players)],%#)]={@pemit %#=%r%r[prompt(App)] You cannot purchase things while in Order.%r};@assert [setr(0, [match(get(#244/Dat`PrimaryStats),%0,|)])]={@pemit %#=[Prompt(App)] [caplist(%0)] is not a Primary Stat.};@assert [lt([elements([get(%#/dat`PrimaryStats)], %q0, |)], [add(9, -[t([match([get(%#/dat`Flaws)], Inferior %0, |)])], [or([match([get(%#/dat`Merits)], Greater %0, |)], [match([get(%#/dat`Merits)], Genius, |)])])])]={@pemit %#=[Prompt(App)] [capstr([lcstr(%0)])] cannot be raised further.}; @assert [or(gte([get(%#/dat`KP)], [max(sub(3,[after(extract(get(%#/Dat`ExpertiseList),[match(get(%#/Dat`ExpertiseList),Elite Tradition*,|)],1,|),^,1)]),1)]), [hasattr(%#/Dat`NPC)])]={@pemit %#=[prompt(app)] You require at least 3 Knowledge Points to raise a stat.}; @assert gte(get(%#/Dat`XP), [setr(1, [if([hasattr(%#/Dat`NPC)],0,switch(get(%#/Dat`Tier),0,250,1,500,2,750,3,1000,4,1500,5,2000,6,2500,7,3500,8,5000))])])={@pemit %#=[Prompt(App)] You need %q1 XP to raise a stat.}; @set %#=Dat`PrimaryStats:[replace([get(%#/dat`PrimaryStats)], %q0, [inc([elements([get(%#/dat`PrimaryStats)], %q0, |)])], |)]; @set %#=Dat`KP:[sub([get(%#/dat`KP)], [if([hasattr(%#/Dat`NPC)],0,max(sub(3,[after(extract(get(%#/Dat`ExpertiseList),[match(get(%#/Dat`ExpertiseList),Elite Tradition*,|)],1,|),^,1)]),1))])]; @set %#=Dat`XP:[sub([get(%#/dat`XP)], %q1)]; @pemit %#={[prompt(app)] [elements([get(#244/dat`PrimaryStats)], %q0, |)] has been raised to [elements([get(%#/dat`PrimaryStats)], %q0, |)] for %q1 XP and [max(sub(3,[after(extract(get(%#/Dat`ExpertiseList),[match(get(%#/Dat`ExpertiseList),Elite Tradition*,|)],1,|),^,1)]),1)] KP[if([match(get(%#/Dat`ExpertiseList),Elite Tradition*,|)],%b%(Elite Tradition%),)]. You have [get(%#/dat`XP)] XP and [get(%#/dat`KP)] KP remaining.}; @skip/ifelse [match(17 25 33 41 49 57 65 73, [ladd([get(%#/dat`PrimaryStats)], |)])]={@set %#=dat`Tier:[inc([get(%#/dat`Tier)])]; @pemit %#={[prompt(Game)] Your tier has increased to Tier [get(%#/dat`Tier)].}; {@eval [switch(1, [lte(1, [get(%#/dat`Tier)], 2)], [setq(2, 3)][setq(3, 3)], [lte(3, [get(%#/dat`Tier)], 4)], [setq(2, 2)][setq(3, 2)], [lte(5, [get(%#/dat`tier)], 6)], [setq(2, 1)][setq(3, 1)], [gte(7, [get(%#/dat`tier)])], [setq(2, 0)][setq(3, 0)])]}; @wait 0={@set %#=dat`SpecialtySlots:[add([get(%#/dat`SpecialtySlots)], %q2)]; @set %#=Dat`ExpertiseSlots:[add([get(%#/dat`ExpertiseSlots)], %q3)]; @pemit %#=[prompt(Game)] You have gained %q2 Specialty Slots and %q3 Expertise Slots.}}; @eval [u(#245/func`Refresh)]; @cemit Monitor-App= [ansi(hm, %N)] %(%#%) has increased their [capstr([lcstr(%0)])] Stat.

@@ &CMD`PROFICIENCYAPP #1215=$+buy/proficiency *:@break [member([get(%l/list`players)],%#)]={@pemit %#=%r%r[prompt(Game)] You cannot purchase things while in Order.%r};@break hasattr(%#/Dat`JutsuAttributes`[edit(%0,%b,-)])={@break [or(gte(get(%#/Dat`KP),[max(sub(3,[after(extract(get(%#/Dat`ExpertiseList),[match(get(%#/Dat`ExpertiseList),Elite Tradition*,|)],1,|),^,1)]),1)]),[hasattr(%#/Dat`NPC)])]={@break [or(gte(get(%#/Dat`XP),[switch([extract(get(%#/dat`jutsuattributes`[edit(%0,%b,-)]),14,1,|)],1,1000,2,2000,3,3000,4,4000,5,5000)]),[hasattr(%#/Dat`NPC)])]={@break lt([extract(get(%#/dat`jutsuattributes`[edit(%0,%b,-)]),14,1,|)],6)={ @set %#=Dat`JutsuAttributes`[edit(%0,%b,-)]:[replace(get(%#/dat`jutsuattributes`[edit(%0,%b,-)]),14,[add([extract(get(%#/Dat`jutsuattributes`[edit(%0,%b,-)]),14,1,|)],1)],|)] ;@set %#=Dat`XP:[sub(get(%#/Dat`XP),[if([hasattr(%#/Dat`NPC)],0,[switch([extract(get(%#/dat`jutsuattributes`[edit(%0,%b,-)]),14,1,|)],1,0,2,1000,3,2000,4,3000,5,4000,6,5000)])])]; @set %#=Dat`KP:[sub(get(%#/Dat`KP),[if([hasattr(%#/Dat`NPC)],0,[max(sub(3,[after(extract(get(%#/Dat`ExpertiseList),[match(get(%#/Dat`ExpertiseList),Elite Tradition*,|)],1,|),^,1)]),1)])])]; @set %#=Dat`JutsuAttributes`[edit(%0,%b,-)]:[replace(get(%#/dat`jutsuattributes`[edit(%0,%b,-)]),15,[add([extract(get(%#/Dat`jutsuattributes`[edit(%0,%b,-)]),15,1,|)],[switch([extract(get(%#/dat`jutsuattributes`[edit(%0,%b,-)]),14,1,|)],2,4,3,4,4,5,5,5,6,6)])],|)];@pemit %#=[prompt(Game)] %N has increased the Jutsu Proficiency Level of [caplist(%0)] to [extract(get(%#/Dat`jutsuattributes`[edit(%0,%b,-)]),14,1,|)], raising the amount of available Jutsu Mastery Points to [extract(get(%#/Dat`jutsuattributes`[edit(%0,%b,-)]),15,1,|)] for [switch([extract(get(%#/dat`jutsuattributes`[edit(%0,%b,-)]),14,1,|)],1,0,2,1000,3,2000,4,3000,5,4000,6,5000)] XP and [max(sub(3,[after(extract(get(%#/Dat`ExpertiseList),[match(get(%#/Dat`ExpertiseList),Elite Tradition*,|)],1,|),^,1)]),1)] KP[if([match(get(%#/Dat`ExpertiseList),Elite Tradition*,|)],%b%(Elite Tradition%),)]. %r%r [get(%#/Dat`XP)] XP, and [get(%#/Dat`KP)] KP remain. ;@cemit monitor-app=[prompt(App)] %N has increased the Proficiency Level of their [caplist(%0,,,L)] jutsu to [extract(get(%#/Dat`jutsuattributes`[edit(%0,%b,-)]),14,1,|)]. };@pemit %#=[prompt(Game)] %N has already achieved the maximum Proficiency Level for the [caplist(%0)] jutsu. };@pemit %#=[prompt(Game)] %N does not have enough XP. };@pemit %#=[prompt(Game)] %N does not have enough KP.}; @pemit %#=[prompt(Game)] %N does not have the [caplist(%0)] Jutsu.

@@ &CMD`RPSKILL #1215=$+buy/RPskill *:@break [member([get(%l/list`players)],%#)]={@pemit %#=%r%r[prompt(App)] You cannot purchase things while in Order.%r};@assert gt([extract(get(%#/Dat`RPSKills),[match(get(#244/Dat`RPSKILLs),%0,|)],1,|)],0)={@pemit %#=[prompt(App)] You do not possess the [caplist(%0,,,L)] RP Skill.};@assert lt([extract(get(%#/Dat`RPSKills),[match(get(#244/Dat`RPSKILLs),%0,|)],1,|)],10)={@pemit %#=[prompt(App)] Your [caplist(%0,,,L)] RP Skill is already at the maximum level of 10.};@assert match(get(#244/Dat`RPSkills),%0,|)={@pemit %#=[prompt(App)] [caplist(%0,,,L)] is not an RP Skill.};@assert [or([hasattr(%#/Dat`NPC)],gte(get(%#/Dat`XP),1000))]={@pemit %#=[prompt(App)] You do not have enough XP(1000) to upgrade the [caplist(%0,,,L)] RP Skill.};@assert [or([hasattr(%#/Dat`NPC)],gte(get(%#/Dat`KP),[max(sub(2,[after(extract(get(%#/Dat`ExpertiseList),[match(get(%#/Dat`ExpertiseList),Elite Tradition*,|)],1,|),^,1)]),1)]))]={@pemit %#=[prompt(App)] You do not have enough KP([max(sub(2,[after(extract(get(%#/Dat`ExpertiseList),[match(get(%#/Dat`ExpertiseList),Elite Tradition*,|)],1,|),^,1)]),1)]) to upgrade the [caplist(%0,,,L)] RP Skill.};@set %#=Dat`RPSkills:[replace(get(%#/Dat`RPSKills),[match(get(#244/Dat`RPSKILLs),[grab(get(#244/Dat`RPSkills),%0,|)],|)],[add([extract(get(%#/Dat`RPSKills),[match(get(#244/Dat`RPSKILLs),%0,|)],1,|)],1)],|)]; @set %#=Dat`XP:[sub(get(%#/Dat`XP),[if([hasattr(%#/Dat`NPC)],0,1000)])]; @set %#=Dat`KP:[sub(get(%#/Dat`KP),[if([hasattr(%#/Dat`NPC)],0,max(sub(2,[after(extract(get(%#/Dat`ExpertiseList),[match(get(%#/Dat`ExpertiseList),Elite Tradition*,|)],1,|),^,1)]),1))])]; @pemit %#=[prompt(App)] You have successfully increased your [caplist(%0,,,L)] RP Skill to [extract(get(%#/Dat`RPSKills),[match(get(#244/Dat`RPSKILLs),%0,|)],1,|)]! You have [get(%#/Dat`XP)] XP and [get(%#/Dat`KP)] KP remaining.; @cemit monitor-app=[prompt(App)] %N has increased their [caplist(%0,,,L)] RP Skill to [extract(get(%#/Dat`RPSKills),[match(get(#244/Dat`RPSKILLs),%0,|)],1,|)].

@@ &CMD`SPECSLOTEXPANSION #1215=$+buy/slot specialty:@break [match([get(%l/list`players)], %#)]={@pemit %#=[prompt(game)] You cannot purchase things while in Order.}; @assert [gt(8, [elements([get(%#/dat`SlotExpansion)], 1, |)])]={@pemit %#=[prompt(Game)] You have already purchased the maximum number of specialty slots.}; @assert [or([hasattr(%#/Dat`NPC)],gte([get(%#/dat`KP)], 10))]={@pemit %#=[prompt(Game)] You do not have enough KP to purchase an extra Specialty slot.}; @assert [or([hasattr(%#/Dat`NPC)],gte([get(%#/dat`XP)], 6500))]={@pemit %#=[prompt(game)] You do not have enough XP to purchase an extra Specialty Slot.}; @set %#=dat`kp:[sub([get(%#/dat`Kp)], [if([hasattr(%#/Dat`NPC)],0,10)])]; @set %#=dat`XP:[sub([get(%#/dat`XP)], [if([hasattr(%#/Dat`NPC)],0,6500)])]; @set %#=dat`SpecialtySlots:[inc([get(%#/dat`SpecialtySlots)])]; @set %#=dat`slotexpansion:[replace([get(%#/dat`slotexpansion)], 1, [inc([elements([get(%#/dat`slotexpansion)], 1, |)])], |)]; @pemit %#=[prompt(Game)] You have purchased a Specialty Slot Expansion upgrade for your character! You have received an extra Specialty Slot for 6500 XP and 10KP. You have [sub(8, [elements([get(%#/dat`SlotExpansion)], 1, |)])] slots remaining to purchase.; @cemit Monitor-App=[ansi(hm, %N)] has purchased an extra Specialty Slot for [ansi(hy, 6500)] XP and [ansi(hy, 10)] KP. %S has [sub(8, [elements([get(%#/dat`SlotExpansion)], 1, |)])] Slots remaining.

@@ &CMD`EXPERTSLOTEXPANSION #1215=$+buy/slot expertise:@break [match([get(%l/list`players)], %#)]={@pemit %#=[prompt(game)] You cannot purchase things while in Order.}; @assert [gt(4, [elements([get(%#/dat`SlotExpansion)], 2, |)])]={@pemit %#=[prompt(Game)] You have already purchased the maximum number of expertise slots.}; @assert [or([hasattr(%#/Dat`NPC)],gte([get(%#/dat`KP)], 10))]={@pemit %#=[prompt(Game)] You do not have enough KP to purchase an extra Expertise slot.}; @assert [or([hasattr(%#/Dat`NPC)],gte([get(%#/dat`XP)], 6500))]={@pemit %#=[prompt(game)] You do not have enough XP to purchase an extra Expertise Slot.}; @set %#=dat`kp:[sub([get(%#/dat`Kp)], [if([hasattr(%#/Dat`NPC)],0,10)])]; @set %#=dat`XP:[sub([get(%#/dat`XP)], [if([hasattr(%#/Dat`NPC)],0,6500)])]; @set %#=dat`ExpertiseSlots:[inc([get(%#/dat`ExpertiseSlots)])]; @set %#=dat`slotexpansion:[replace([get(%#/dat`slotexpansion)], 2, [inc([elements([get(%#/dat`slotexpansion)], 2, |)])], |)]; @pemit %#=[prompt(Game)] You have purchased a Expertise Slot Expansion upgrade for your character! You have received an extra Expertise Slot for 6500 XP and 10KP. You have [sub(4, [elements([get(%#/dat`SlotExpansion)], 2, |)])] slots remaining to purchase.; @cemit Monitor-App=[ansi(hm, %N)] has purchased an extra Expertise Slot for [ansi(hy, 6500)] XP and [ansi(hy, 10)] KP. %S has [sub(4, [elements([get(%#/dat`SlotExpansion)], 2, |)])] Slots remaining.

@@ &CMD`TFRANK #1215=$+TFRank *:@assert match(get(%#/Dat`TFList),%0,|)={@pemit %#=[prompt(Game)] You do not possess the [caplist(%0,,,l)] Transformation.};@assert lt(get(%#/Dat`TFRank`[setr(0, [edit(%0,%b,-)])]),3)={@pemit %#=[prompt(Game)] Your [caplist(%0,,,L)] Transformation is already at the maximum rank([get(%#/Dat`TFRank`%q0)]).};@assert [and([gte(get(%#/Dat`XP),[setr(2, [if([hasattr(%#/dat`NPC)], 0, 2500)])])],[gte(get(%#/Dat`KP),[setr(1, [if([hasattr(%#/dat`NPC)], 0, [max(sub(10,[after(extract(get(%#/Dat`ExpertiseList),[match(get(%#/Dat`ExpertiseList),Elite Tradition*,|)],1,|),^,1)]),1)])])])],[gte([sqlite_query(Game, select LP from Accounts where Email='[get(%#/dat`account)]')],[setr(3, [if([hasattr(%#/dat`NPC)], 0, 5)])])])]={@pemit %#=[prompt(Game)] You do not have enough XP, KP, or LP to purchase a TF Rank increase.}; @eval [set(%#,Dat`XP:[sub(get(%#/Dat`XP),%q2)])][set(%#,Dat`KP:[sub(get(%#/Dat`KP),%q1)])][sqlite_query(Game, update Accounts set LP=[sub([sqlite_query(Game, select LP from Accounts where Email='[get(%#/dat`account)]')],%q3)] where Email='[get(%#/dat`account)]')][set(%#,Dat`TFRank`%q0:[inc([get(%#/Dat`TFRank`%q0)])])]; @pemit %#=[prompt(Game)] You have increased your [caplist(%0,,,L)] Transformation to Rank [get(%#/Dat`TFRank`%q0)] for %q2 XP, %q1 KP, and %q3 LP!

@@ &CMD`INSTRUCT #1215=$+instruct *=*:@assert nearby(%#,[pmatch(%1)])={@pemit %#=[prompt(Game)] The character you are trying to instruct is not present in the room.};@assert hasattr(%#/Dat`JutsuAttributes`[edit(%0,%b,-)])={@pemit %#=[prompt(Game)] You do not possess the [caplist(%0,,,L)] jutsu.};@assert !hasattr([pmatch(%1)]/Dat`JutsuAttributes`[edit(%0,%b,-)])={@pemit %#=[prompt(Game)] [name([pmatch(%1)])] already possess the [caplist(%0,,,L)] jutsu.};@assert gte(get([pmatch(%1)]/Dat`KP),[switch([sqlite_query(Game, Select Rank From Templates Where ID="[extract(get(%#/Dat`JutsuAttributes`[edit(%0,%b,-)]),7,1,|)]")],E,2,D,3,C,4,B,6,A,7,S,8)])={@pemit %#=[prompt(Game)] [name([pmatch(%1)])] does not have enough KP to learn the [caplist(%0,,,L)] jutsu from you at this time.};@assert gte(get([pmatch(%1)]/Dat`XP),[floor(mul(add(sqlite_query(Game, Select XP From Templates Where ID="[extract(get(%#/Dat`JutsuAttributes`[edit(%0,%b,-)]),7,1,|)]"),[switch([extract(get(%#/Dat`JutsuAttributes`[edit(%0,%b,-)]),14,1,|)],1,0,2,1000,3,3000,4,6000,5,10000,6,15000)]),[switch(1,[and([match(get([pmatch(%1)]/Dat`AffinityList),sqlite_query(Game, Select Type From Templates Where ID="[extract(get(%#/Dat`JutsuAttributes`[edit(%0,%b,-)]),7,1,|)]"),|)],[match(Ninjutsu|Nintaijutsu|Chakra Flow Taijutsu|Chakra Flow Bukijutsu,sqlite_query(Game, Select Archetype From Templates Where ID="[extract(get(%#/Dat`JutsuAttributes`[edit(%0,%b,-)]),7,1,|)]"),|)])],[sub(.75,[if(match([regeditall(get([pmatch(%1)]/dat`ExpertiseList), %\^%[012%],)],Elite Tradition,|),.05,0)],[if(hasattr(%#/Dat`Students),[if(match(get(%#/Dat`Students),[pmatch(%1)]),.1,0)],0)])],[and([match(get([pmatch(%1)]/Dat`AffinityList),Yang,|)],[match(Taijutsu|Bukijutsu,sqlite_query(Game, Select Archetype From Templates Where ID="[extract(get(%#/Dat`JutsuAttributes`[edit(%0,%b,-)]),7,1,|)]"),|)])],[sub(.75,[if(match([regeditall(get([pmatch(%1)]/dat`ExpertiseList), %\^%[012%],)],Elite Tradition,|),.05,0)],[if(hasattr(%#/Dat`Students),[if(match(get(%#/Dat`Students),[pmatch(%1)]),.1,0)],0)])],[and([match(get([pmatch(%1)]/Dat`AffinityList),Yin,|)],[match(Seals|Calligraphy,sqlite_query(Game, Select Archetype From Templates Where ID="[extract(get(%#/Dat`JutsuAttributes`[edit(%0,%b,-)]),7,1,|)]"),|)])],[sub(.75,[if(match([regeditall(get([pmatch(%1)]/dat`ExpertiseList), %\^%[012%],)],Elite Tradition,|),.05,0)],[if(hasattr(%#/Dat`Students),[if(match(get(%#/Dat`Students),[pmatch(%1)]),.1,0)],0)])],1)]))])={@pemit %#=[prompt(Game)] [name([pmatch(%1)])] does not have enough XP to learn the [caplist(%0,,,L)] jutsu from you at this time.};@assert [u(#1215/Func`ExpertSpecCon,%0,%1)]={@pemit %#=[prompt(Game)] [name([pmatch(%1)])] does not have the Specialties training necessary to be taught the [caplist(%0,,,L)] jutsu at this time.};@assert if(match(sqlite_query(Game, select Author from Templates where ID="[elements(get(%#/Dat`JutsuAttributes`[edit(%0,%b,-)]),7,|)]"),General),1,match(sqlite_query(Game, select Author from Templates where ID="[elements(get(%#/Dat`JutsuAttributes`[edit(%0,%b,-)]),7,|)]"),get([pmatch(%1)]/Dat`Clan),|))={@pemit %#=[prompt(Game)] [name([pmatch(%1)])] is not part of a clan capable of learning this jutsu. };@eval [t([setq(0,[pmatch(%1)])])];@pemit %#=[prompt(game)] You have offered to instruct [ansi(y, [name(%q0)])] in the usage of the [caplist(%0,,,L)] jutsu.;@pemit %q0=[prompt(game)] [ansi(c, %N)] wants to instruct you in thier [ansi(hy,caplist(%0,,,L))] Jutsu. %r%rType [ansi(hg, +lesson/review)] to look at the jutsu being offered and it's costs. Type [ansi(hg, +lesson/accept)] or [ansi(hg, +lesson/decline)] to accept or decline the jutsu instruction.;&dat`Jutsushower %q0=%#|%0

@@ &CMD`INSTRUCT-RESPONSE #1215=$^\+lesson/(accept|decline)$:@break [hasattr(%#, dat`jutsushower)]={@break [strmatch(%1, accept)]={@pemit [extract(get(%#/Dat`JutsuShower),1,1,|)]=[prompt(game)] [ansi(y, [cname(%#)])] has accepted the instruction in your [extract(get(%#/Dat`JutsuShower),2,1,|)] jutsu.;@pemit %#=[prompt(Game)] You have accepted instruction in [ansi(c,name(extract(get(%#/Dat`JutsuShower),1,1,|)))]'s [extract(get(%#/Dat`JutsuShower),2,1,|)] jutsu for [u(#1215/Func`InstructXpCost,[extract(get(%#/Dat`JutsuShower),1,1,|)],[extract(get(%#/Dat`JutsuShower),2,1,|)])] XP and [switch([sqlite_query(Game, Select Rank From Templates Where ID="[extract(get([extract(get(%#/Dat`JutsuShower),1,1,|)]/Dat`JutsuAttributes`[edit([extract(get(%#/Dat`JutsuShower),2,1,|)],%b,-)]),7,1,|)]")],E,2,D,3,C,4,B,6,A,7,S,8)] KP.;@set %#=dat`JutsuAttributes`[edit([extract(get(%#/Dat`JutsuShower),2,1,|)],%b,-)]:[get([extract(get(%#/Dat`JutsuShower),1,1,|)]/Dat`JutsuAttributes`[edit([extract(get(%#/Dat`JutsuShower),2,1,|)],%b,-)])];@set %#=Dat`XP:[sub(get(%#/Dat`XP),[u(#1215/Func`InstructXpCost,[extract(get(%#/Dat`JutsuShower),1,1,|)],[extract(get(%#/Dat`JutsuShower),2,1,|)])])];@set %#=Dat`KP:[sub(get(%#/Dat`KP),[switch([sqlite_query(Game, Select Rank From Templates Where ID="[extract(get([extract(get(%#/Dat`JutsuShower),1,1,|)]/Dat`JutsuAttributes`[edit([extract(get(%#/Dat`JutsuShower),2,1,|)],%b,-)]),7,1,|)]")],E,2,D,3,C,4,B,6,A,7,S,8)])];&dat`jutsushower %#=};@pemit %#=[prompt(game)] You have [ansi(r, declined)] to learn [ansi(c, [name([extract(get(%#/Dat`JutsuShower),1,1,|)])])]'s [extract(get(%#/Dat`JutsuShower),2,1,|)] jutsu.;@pemit [extract(get(%#/Dat`JutsuShower),1,1,|)]=[prompt(game)] [ansi(y, %N)] has [ansi(r, declined)] to learn your [extract(get(%#/Dat`JutsuShower),2,1,|)] jutsu.;&dat`jutsushower %#=};@pemit %#=[prompt(game)] No one is attempting to instruct you in a jutsu.

@@ &CMD`FORGETJUTSU #1215=$+Jutsu/forget *:@assert hasattr(%#/Dat`JutsuAttributes`[edit(%0,%b,-)])={@pemit %#=[prompt(Game)] You do not possess the [caplist(%0,,,L)] jutsu.};@break match(get(%#/Dat`CopyList),extract(get(%#/Dat`JutsuAttributes`[edit(%0,%b,-)]),8,1,|),|)={[prompt(Game)] You cannot forget a jutsu that is merely a copy.};@set %#=Dat`XP:[add(get(%#/Dat`XP),[setr(+,[if(hasattr(%#/Dat`NPC),0,[add([switch(extract(get(%#/Dat`JutsuAttributes`[edit(%0,%b,-)]),14,1,|),1,0,2,1000,3,3000,4,6000,5,10000,6,15000)],[floor(mul([sqlite_query(Game, Select XP From Templates where ID="[extract(get(%#/Dat`JutsuAttributes`[edit(%0,%b,-)]),7,1,|)]")],[sub(switch(1,and([match(get(%#/Dat`AffinityList),[sqlite_query(Game, Select Type From Templates where ID="[extract(get(%#/Dat`JutsuAttributes`[edit(%0,%b,-)]),7,1,|)]")],|)],[match(Ninjutsu|Nintaijutsu|Chakra Flow Taijutsu|Chakra Flow Bukijutsu,[sqlite_query(Game, Select Archetype From Templates where ID="[extract(get(%#/Dat`JutsuAttributes`[edit(%0,%b,-)]),7,1,|)]")],|)]),.75,and([match(get(%#/Dat`AffinityList),Yang,|)],[match(Taijutsu|Bukijutsu,[sqlite_query(Game, Select Archetype From Templates where ID="[extract(get(%#/Dat`JutsuAttributes`[edit(%0,%b,-)]),7,1,|)]")],|)]),.75,and([match(get(%#/Dat`AffinityList),Yin,|)],[match(Seals|Calligraphy,[sqlite_query(Game, Select Archetype From Templates where ID="[extract(get(%#/Dat`JutsuAttributes`[edit(%0,%b,-)]),7,1,|)]")],|)]),.75,1),[if(match([regeditall(get(%#/dat`ExpertiseList), %\^%[012%],)],Elite Tradition,|),.05,0)])]))])])],XP)])]; @pemit %#=[prompt(Game)] You have forgotten the [caplist(%0,,,L)] jutsu, recovering %q<XP> XP and removing the jutsu from your character. ; @set %#=Dat`JutsuAttributes`[edit(%0,%b,-)]: ; @cemit monitor-app= [prompt(Forget)] %N has forgotten the [caplist(%0,,,L)] jutsu, recovering %q<XP> XP and removing the jutsu from their character.



@@ &CMD`FORGETTF #1215=$+TF/forget *:@assert match(get(%#/Dat`TFList),%0,|)={@pemit %#=[prompt(Game)] You do not possess the [caplist(%0,,,L)] Transformation.};@set %#=Dat`XP:[add(get(%#/Dat`XP),[setr(+,[if(hasattr(%#/Dat`NPC),0,[add(10000,[switch(get(%#/Dat`TFRank`[edit(%0,%b,-)]),0,0,1,5000,2,10000,3,15000,0)])])],XP)])]; @pemit %#=[prompt(Game)] You have forgotten the [caplist(%0,,,L)] Transformation, recovering %q<XP> XP and removing the Transformation from your character. ; @set %#=Dat`TFList:[remove(get(%#/Dat`TFlist),[grab(get(%#/Dat`TFList),%0,|)],|)]; @cemit monitor-app= [prompt(Forget)] %N has forgotten the [caplist(%0,,,L)] Transformation, recovering %q<XP> XP and removing the Transformation from their character.

@@ &CMD`RETAIN #1215=$+Retain *:@assert match(get(%#/Dat`TFList),Sharingan,|)={@pemit %#=[prompt(Game)] You are not capable of retaining copied jutsu.};@assert strmatch(get(%#/Dat`Copylist,%0,|))={@pemit %#=[prompt(Game)] You do not have the [caplist(%0,,,L)] jutsu copied.};@assert gte(get(%#/Dat`XP),[add(sqlite_query(Game, Select XP From Templates Where ID="[extract(get(%#/Dat`JutsuAttributes`[edit(%0,%b,-)]),7,1,|)]"),[switch([extract(get(%#/Dat`JutsuAttributes`[edit(%0,%b,-)]),14,1,|)],1,0,2,1000,3,3000,4,6000,5,10000,6,15000)])])={@pemit %#=[prompt(Game)] You do not have enough XP([add(sqlite_query(Game, Select XP From Templates Where ID="[extract(get(%#/Dat`JutsuAttributes`[edit(%0,%b,-)]),7,1,|)]"),[switch([extract(get(%#/Dat`JutsuAttributes`[edit(%0,%b,-)]),14,1,|)],1,0,2,1000,3,3000,4,6000,5,10000,6,15000)])]) to retain the [caplist(%0,,,L)] jutsu.};@assert gte(get(%#/Dat`KP),[max(sub(switch([sqlite_query(Game, Select Rank From Templates Where ID="[extract(get(%#/Dat`JutsuAttributes`[edit(%0,%b,-)]),7,1,|)]")],E,2,D,3,C,4,B,6,A,7,S,8),[after(extract(get(%#/Dat`ExpertiseList),[match(get(%#/Dat`ExpertiseList),Elite Tradition*,|)],1,|),^,1)]),1)])={@pemit %#= [prompt(Game)] You do not have enough KP%([max(sub(switch([sqlite_query(Game, Select Rank From Templates Where ID="[extract(get(%#/Dat`JutsuAttributes`[edit(%0,%b,-)]),7,1,|)]")],E,2,D,3,C,4,B,6,A,7,S,8),[after(extract(get(%#/Dat`ExpertiseList),[match(get(%#/Dat`ExpertiseList),Elite Tradition*,|)],1,|),^,1)]),1)]%) to retain the [caplist(%0,,,L)] jutsu.};@set %#=Dat`XP:[sub(get(%#/Dat`XP),[add(sqlite_query(Game, Select XP From Templates Where ID="[extract(get(%#/Dat`JutsuAttributes`[edit(%0,%b,-)]),7,1,|)]"),[switch([extract(get(%#/Dat`JutsuAttributes`[edit(%0,%b,-)]),14,1,|)],1,0,2,1000,3,3000,4,6000,5,10000,6,15000)])])]; @set %#=Dat`KP:[sub(get(%#/Dat`KP),[max(sub(switch([sqlite_query(Game, Select Rank From Templates Where ID="[extract(get(%#/Dat`JutsuAttributes`[edit(%0,%b,-)]),7,1,|)]")],E,2,D,3,C,4,B,6,A,7,S,8),[after(extract(get(%#/Dat`ExpertiseList),[match(get(%#/Dat`ExpertiseList),Elite Tradition*,|)],1,|),^,1)]),1)])] ;@pemit %#=[prompt(Game)] You have chosen to retain the [caplist(%0,,,L)] jutsu for [add(sqlite_query(Game, Select XP From Templates Where ID="[extract(get(%#/Dat`JutsuAttributes`[edit(%0,%b,-)]),7,1,|)]"),[switch([extract(get(%#/Dat`JutsuAttributes`[edit(%0,%b,-)]),14,1,|)],1,0,2,1000,3,3000,4,6000,5,10000,6,15000)])] XP and [max(sub(switch([sqlite_query(Game, Select Rank From Templates Where ID="[extract(get(%#/Dat`JutsuAttributes`[edit(%0,%b,-)]),7,1,|)]")],E,2,D,3,C,4,B,6,A,7,S,8),[after(extract(get(%#/Dat`ExpertiseList),[match(get(%#/Dat`ExpertiseList),Elite Tradition*,|)],1,|),^,1)]),1)] KP[if([match(get(%#/Dat`ExpertiseList),Elite Tradition*,|)],%b%(Elite Tradition%),)]. You have [get(%#/Dat`XP)] XP and [get(%#/Dat`KP)] KP remaining. ; @cemit monitor-app=[prompt(Game)] %N has chosen to retain the [caplist(%0,,,L)] jutsu for [add(sqlite_query(Game, Select XP From Templates Where ID="[extract(get(%#/Dat`JutsuAttributes`[edit(%0,%b,-)]),7,1,|)]"),[switch([extract(get(%#/Dat`JutsuAttributes`[edit(%0,%b,-)]),14,1,|)],1,0,2,1000,3,3000,4,6000,5,10000,6,15000)])] XP and [max(sub(switch([sqlite_query(Game, Select Rank From Templates Where ID="[extract(get(%#/Dat`JutsuAttributes`[edit(%0,%b,-)]),7,1,|)]")],E,2,D,3,C,4,B,6,A,7,S,8),[after(extract(get(%#/Dat`ExpertiseList),[match(get(%#/Dat`ExpertiseList),Elite Tradition*,|)],1,|),^,1)]),1)] KP[if([match(get(%#/Dat`ExpertiseList),Elite Tradition*,|)],%b%(Elite Tradition%),)]. ; @set %#=Dat`JutsuAttributes`[edit(%0,%b,-)]:[get(%#/Dat`JutsuAttributes`[edit(%0,%b,-)])]; @set %#=Dat`CopyList:[remove(get(%#/Dat`Copylist),%0,|)]



@@ NEW:
&CMD`EXPERTISEAPP #2134=$+Buy/Expertise *:@assert [hasattr(%#/dat`approval)]={@pemit %#=[prompt(Game)] You cannot buy things from CG.}; @break [member([get(%l/list`players)],%#)]={@pemit %#=%r%r[prompt(Game)] You cannot purchase things while in Order.%r};@assert match(get(%#/Dat`ExpertiseList),%0*,|)={@pemit %#=[prompt(Game)] You do not already have the [ansi(hr,[grab(get(#244/Dat`SpecialtyList),%0,|)])] specialty.};@assert t(match([get(#244/Dat`ArchetypeSpec)]|[get(#244/Dat`AdvancedSpec)]|[get(#244/Dat`EliteSpec)]|[get(#244/Dat`UniqueSpec)],%0,|))={@pemit %#=[prompt(Game)] [caplist(%0,,,L)] is not a Specialty.};@break gte([after(grab(get(%#/dat`expertiseList), %0*, |), ^)],2)={@pemit %#=[prompt(Game)] You cannot upgrade Expertise beyond level 2.};@assert gte([setr(0, [sqlite_query(Game, select XP from Accounts where Email='[get(%#/dat`account)]')])],[setr(2, [switch(1, [hasattr(%#/dat`NPC)], 0, [eq([after([grab([get(%#/dat`ExpertiseList)], %0*, |)], ^)], 0)], 5000, 10000)])])={@pemit %#=[prompt(Game)] You do not have enough XP to upgrade an Expertise Level.};@assert gte(get(%#/Dat`KP),[setr(1, [if([hasattr(%#/dat`NPC)], 0, 5)])])={@pemit %#=[prompt(Game)] You do not have enough KP to upgrade an Expertise Level.};@assert gte(get(%#/Dat`ExpertiseSlots),1)={@pemit %#=[prompt(Game)] You do not have any open Expertise slots.}; @eval [sqlite_query(Game, update Accounts set XP=[sub(%q0, %q2)] where Email='[get(%#/dat`account)]')][set(%#, dat`XP-spent:[add([get(%#/dat`XP-spent)], %q2)])]; @set %#=Dat`KP:[sub(get(%#/Dat`KP),%q1)];@set %#=Dat`ExpertiseSlots:[sub(get(%#/Dat`ExpertiseSlots),1)];@set %#=Dat`ExpertiseList:[replace(get(%#/dat`expertiseList),[match(get(%#/dat`expertiseList), %0*, |)],[before(grab(get(%#/dat`expertiseList), %0*, |), ^)]^[add(after(grab(get(%#/dat`expertiseList), %0*, |), ^),1)],|)];@pemit %#=%r[prompt(Game)] You have successfully acquired Expertise in the [ansi(hg,[grab(get(#244/Dat`SpecialtyList),%0,|)])] Specialty, raising the Expertise level to [after(grab(get(%#/dat`expertiseList), %0*, |), ^)] for %q2 XP and %q1 KP. You have [sqlite_query(Game, select XP from Accounts where Email='[get(%#/dat`Account)]')] XP and [get(%#/Dat`KP)] KP remaining.; @cemit monitor-app=[prompt(Game)] %N has purchased and upgrade to the Expertise of their [grab(get(#244/Dat`SpecialtyList),%0,|)] Specialty, raising it to level [after(grab(get(%#/dat`expertiseList), %0*, |), ^)].

&CMD`SPECIALTYAPP #2134=$+buy/specialty *:@assert [hasattr(%#/dat`approval)]={@pemit %#=[prompt(Game)] You cannot buy things from CG.}; @break [member([get(%l/list`players)],%#)]={@pemit %#=%r%r[prompt(Game)] You cannot purchase things while in Order.%r};@assert t(match([get(#244/Dat`ArchetypeSpec)]|[get(#244/Dat`AdvancedSpec)]|[get(#244/Dat`EliteSpec)]|[get(#244/Dat`UniqueSpec)],%0,|))={@pemit %#=[prompt(Game)] [caplist(%0,,,L)] is not a proper Specialty.};@assert [gte([setr(0, [sqlite_query(Game, select XP from Accounts where Email='[get(%#/dat`Account)]')])], [setr(1, [switch(1, [hasattr(%#/dat`NPC)], 0, [t([match([get(#244/dat`ArchetypeSpec)], %0, |)])], 1000, [t([match([get(#244/dat`AdvancedSpec)], %0, |)])], 2000, [t([match([get(#244/dat`EliteSpec)], %0, |)])], 3000, [t([match([get(#244/dat`UniqueSpec)], %0, |)])], 10000)])])]={@pemit %#=[prompt(Game)] You do not have enough XP.}; @assert !match(get(%#/Dat`ExpertiseList),%0*,|)={@pemit %#=[prompt(Game)] You already have the [ansi(hr,[grab(get(#244/Dat`SpecialtyList),%0,|)])] specialty.};@break [and([match([get(#244/dat`UniqueSpec)], %0, |)], [gte([words([setinter([regeditall([get(%#/dat`ExpertiseList)], %\^%[0-2%],)], [get(#244/dat`UniqueSpec)],|)], |)], 3)])]={@pemit %#=[prompt(Game)] You cannot have more than 3 Unique Specialties.} ;@assert gte(get(%#/Dat`SpecialtySlots),1)={@pemit %#=[prompt(Game)] You do not have any open specialty slots.};@assert [u(#2134/Func`SpecialtyPreReq,%0)]={@pemit %#=[prompt(Game)] You do not meet the prerequisites for the [ansi(hr,[grab(get(#244/Dat`SpecialtyList),%0,|)])] specialty.};@set %#=Dat`SpecialtySlots:[sub(get(%#/Dat`SpecialtySlots),1)];@set %#=Dat`ExpertiseList:[insert(get(%#/Dat`ExpertiseList),-1,[grab(get(#244/Dat`SpecialtyList),%0,|)]^0,|)]; @eval [set(%#, dat`XP-spent:[add([get(%#/dat`XP-spent)], %q1)])][sqlite_query(Game, update Accounts set XP=[sub(%q0, %q1)] where Email='[get(%#/dat`Account)]')];@set %#=dat`RPSkills:[replace([get(%#/dat`RPSkills)], [iter([get(#658/list`RPSkill-Specialties`[edit(%0, %b, -)])], [match([get(#244/dat`RPSkills)],##, |)], |)], 1, |)];@pemit %#=%r[prompt(Game)] You have successfully acquired [ansi(hg,[grab(get(#244/Dat`SpecialtyList),%0,|)])] as a specialty for %q1 XP, adding it to your Nindo! You have [sqlite_query(Game, select XP from Accounts where Email='[get(%#/dat`Account)]')] XP remaining.; @cemit monitor-app=[prompt(Game)] %N has purchased the [grab(get(#244/Dat`SpecialtyList),%0,|)] Specialty.



@@ OLD:
@@ &CMD`EXPERTISEAPP #2134=$+Buy/Expertise *:@assert [hasattr(%#/dat`approval)]={@pemit %#=[prompt(Game)] You cannot buy things from CG.}; @break [member([get(%l/list`players)],%#)]={@pemit %#=%r%r[prompt(Game)] You cannot purchase things while in Order.%r};@assert match(get(%#/Dat`ExpertiseList),%0*,|)={@pemit %#=[prompt(Game)] You do not already have the [ansi(hr,[grab(get(#244/Dat`SpecialtyList),%0,|)])] specialty.};@assert t(match([get(#244/Dat`ArchetypeSpec)]|[get(#244/Dat`AdvancedSpec)]|[get(#244/Dat`EliteSpec)]|[get(#244/Dat`UniqueSpec)],%0,|))={@pemit %#=[prompt(Game)] [caplist(%0,,,L)] is not a Specialty.};@break gte([after(grab(get(%#/dat`expertiseList), %0*, |), ^)],2)={@pemit %#=[prompt(Game)] You cannot upgrade Expertise beyond level 2.};@assert gte(get(%#/Dat`XP),[setr(1, [switch(1, [hasattr(%#/dat`NPC)], 0, [eq([after([grab([get(%#/dat`ExpertiseList)], %0*, |)], ^)], 0)], 5000, 10000)])])={@pemit %#=[prompt(Game)] You do not have enough XP to upgrade an Expertise Level.};@assert gte(get(%#/Dat`KP),[setr(2, [if([hasattr(%#/dat`NPC)], 0, 5)])])={@pemit %#=[prompt(Game)] You do not have enough KP to upgrade an Expertise Level.};@assert gte(get(%#/Dat`ExpertiseSlots),1)={@pemit %#=[prompt(Game)] You do not have any open Expertise slots.}; @set %#=Dat`XP:[sub(get(%#/Dat`XP),%q1)];@set %#=Dat`KP:[sub(get(%#/Dat`KP),%q2)];@set %#=Dat`ExpertiseSlots:[sub(get(%#/Dat`ExpertiseSlots),1)];@set %#=Dat`ExpertiseList:[replace(get(%#/dat`expertiseList),[match(get(%#/dat`expertiseList), %0*, |)],[before(grab(get(%#/dat`expertiseList), %0*, |), ^)]^[add(after(grab(get(%#/dat`expertiseList), %0*, |), ^),1)],|)];@pemit %#=%r[prompt(Game)] You have successfully acquired Expertise in the [ansi(hg,[grab(get(#244/Dat`SpecialtyList),%0,|)])] Specialty, raising the Expertise level to [after(grab(get(%#/dat`expertiseList), %0*, |), ^)] for %q1 XP and %q2 KP. You have [get(%#/Dat`XP)] XP and [get(%#/Dat`KP)] KP remaining.; @cemit monitor-app=[prompt(Game)] %N has purchased and upgrade to the Expertise of their [grab(get(#244/Dat`SpecialtyList),%0,|)] Specialty, raising it to level [after(grab(get(%#/dat`expertiseList), %0*, |), ^)].

@@ &CMD`SPECIALTYAPP #2134=$+buy/specialty *:@assert [hasattr(%#/dat`approval)]={@pemit %#=[prompt(Game)] You cannot buy things from CG.}; @break [member([get(%l/list`players)],%#)]={@pemit %#=%r%r[prompt(Game)] You cannot purchase things while in Order.%r};@assert t(match([get(#244/Dat`ArchetypeSpec)]|[get(#244/Dat`AdvancedSpec)]|[get(#244/Dat`EliteSpec)]|[get(#244/Dat`UniqueSpec)],%0,|))={@pemit %#=[prompt(Game)] [caplist(%0,,,L)] is not a proper Specialty.};@assert [gte([get(%#/dat`XP)], [setr(1, [switch(1, [hasattr(%#/dat`NPC)], 0, [t([match([get(#244/dat`ArchetypeSpec)], %0, |)])], 1000, [t([match([get(#244/dat`AdvancedSpec)], %0, |)])], 2000, [t([match([get(#244/dat`EliteSpec)], %0, |)])], 3000, [t([match([get(#244/dat`UniqueSpec)], %0, |)])], 10000)])])]={@pemit %#=[prompt(Game)] You do not have enough XP.}; @assert !match(get(%#/Dat`ExpertiseList),%0*,|)={@pemit %#=[prompt(Game)] You already have the [ansi(hr,[grab(get(#244/Dat`SpecialtyList),%0,|)])] specialty.};@break [and([match([get(#244/dat`UniqueSpec)], %0, |)], [gte([words([setinter([regeditall([get(%#/dat`ExpertiseList)], %\^%[0-2%],)], [get(#244/dat`UniqueSpec)],|)], |)], 3)])]={@pemit %#=[prompt(Game)] You cannot have more than 3 Unique Specialties.} ;@assert gte(get(%#/Dat`SpecialtySlots),1)={@pemit %#=[prompt(Game)] You do not have any open specialty slots.};@assert [u(#2134/Func`SpecialtyPreReq,%0)]={@pemit %#=[prompt(Game)] You do not meet the prerequisites for the [ansi(hr,[grab(get(#244/Dat`SpecialtyList),%0,|)])] specialty.};@set %#=Dat`SpecialtySlots:[sub(get(%#/Dat`SpecialtySlots),1)];@set %#=Dat`ExpertiseList:[insert(get(%#/Dat`ExpertiseList),-1,[grab(get(#244/Dat`SpecialtyList),%0,|)]^0,|)]; @set %#=Dat`XP:[sub(get(%#/Dat`XP),%q1)];@set %#=dat`RPSkills:[replace([get(%#/dat`RPSkills)], [iter([get(#658/list`RPSkill-Specialties`[edit(%0, %b, -)])], [match([get(#244/dat`RPSkills)],##, |)], |)], 1, |)];@pemit %#=%r[prompt(Game)] You have successfully acquired [ansi(hg,[grab(get(#244/Dat`SpecialtyList),%0,|)])] as a specialty for %q1 XP, adding it to your Nindo! You have [get(%#/Dat`XP)] XP remaining.; @cemit monitor-app=[prompt(Game)] %N has purchased the [grab(get(#244/Dat`SpecialtyList),%0,|)] Specialty.




@@ NEW:
&CMD`XP-GIVE #1223=$+gift/XP *=*:@assert [gte([bittype(%#)], 4)]={@pemit %#=[error()]}; @assert [t([setr(0, [pmatch(%0)])])]={@pemit %#=[prompt(Game)] Please choose a valid player.}; @assert [isint(%1)]={@pemit %#=[prompt(Game)] Please give a player a valid number of XP.}; @eval [sqlite_query(Game, update Accounts set XP=[add(%1, [sqlite_query(Game, select XP from Accounts where Email='[get(%q0/dat`Account)]')])] where Email='[get(%q0/dat`Account)]')];@cemit monitor-app={%k has given [ansi(y, [name(%q0)])] [ansi(hg, %1)] XP. They now have: [sqlite_query(Game, select XP from Accounts where Email='[get(%q0/dat`Account)]')] XP}; @pemit %#=[prompt(Game)] You have given [ansi(y, [name(%q0)])] [ansi(hg, %1)] XP. They now have: [sqlite_query(Game, select XP from Accounts where Email='[get(%q0/dat`Account)]')] XP

&CMD`LIFE-XP-GIVE #1223=$+gift/total *=*:@assert [gte([bittype(%#)], 5)]={@pemit %#=[error()]}; @assert [t([setr(0, [pmatch(%0)])])]={@pemit %#=[prompt(Game)] Please choose a valid player.}; @assert [isint(%1)]={@pemit %#=[prompt(Game)] Please give a player a valid number of XP.}; @eval [sqlite_query(Game, update Accounts set XP=[add(%1, [sqlite_query(Game, select XP from Accounts where Email='[get(%q0/dat`Account)]')])] where Email='[get(%q0/dat`Account)]')][sqlite_query(Game, update Accounts set "Total XP"=[add(%1, [sqlite_query(Game, select "Total XP" from Accounts where Email='[get(%q0/dat`Account)]')])] where Email='[get(%q0/dat`Account)]')];@cemit monitor-app={%k has given [ansi(y, [name(%q0)])] [ansi(hg, %1)] Total XP. They now have: [sqlite_query(Game, select XP from Accounts where Email='[get(%q0/dat`Account)]')]XP and [sqlite_query(Game, select "Total XP" from Accounts where Email='[get(%q0/dat`Account)]')] Total XP}; @pemit %#=[prompt(Game)] You have given [ansi(y, [name(%q0)])] [ansi(hg, %1)] XP. They now have: [sqlite_query(Game, select XP from Accounts where Email='[get(%q0/dat`Account)]')] XP and [sqlite_query(Game, select "Total XP" from Accounts where Email='[get(%q0/dat`Account)]')] Total XP};


@@ OLD:
@@ &CMD`XP-GIVE #1223=$+gift/XP *=*:@break [gte([bittype(%#)], 5)]={@break [t([setr(0, [pmatch(%0)])])]={@assert [isint(%1)]={@pemit %#=[prompt(Game)] Please give a player a valid number of XP.}; @eval [set(%q0, dat`XP:[add([get(%q0/dat`XP)], %1)])];@cemit monitor-app={%k has given [ansi(y, [name(%q0)])] [ansi(hg, %1)] XP. They now have: [get(%q0/dat`XP)] XP}; @pemit %#=[prompt(Game)] You have given [ansi(y, [name(%q0)])] [ansi(hg, %1)] XP. They now have: [get(%q0/dat`XP)] XP}; @pemit %#=[prompt(Game)] Please choose a valid player.}; @pemit %#=[error()]
@@ &CMD`LIFE-XP-GIVE #1223=$+gift/life *=*:@break [gte([bittype(%#)], 5)]={@break [t([setr(0, [pmatch(%0)])])]={@assert [isint(%1)]={@pemit %#=[prompt(Game)] Please give a player a valid number of XP.}; @eval [set(%q0, dat`XP-lifetime:[add([get(%q0/dat`XP-lifetime)], %1)])];@cemit monitor-app={%k has given [ansi(y, [name(%q0)])] [ansi(hg, %1)] Lifetime XP. They now have: [get(%q0/dat`XP-lifetime)] Lifetime XP}; @pemit %#=[prompt(Game)] You have given [ansi(y, [name(%q0)])] [ansi(hg, %1)] XP. They now have: [get(%q0/dat`XP-lifetime)] Lifetime XP}; @pemit %#=[prompt(Game)] Please choose a valid player.}; @pemit %#=[error()]


&CMD`STAFF-XP #1223=$+XP *:@break [or([gte([bittype(%#)], 5)],[hasslabs(%#,staff-skill)])]={@skip/ifelse [t([setr(0, [pmatch(%0)])])]={@pemit %#=[Setq(5,[ladd(elements(u(#121/list`xp-num-mods), parse(u(%q0/dat`xp-gauge), match([u(#121/list`xp-named-mods)], ##))))])][printf($^69:[ansi(hb, -=)]:s, < [ansi(hw, [cname(%q0)]'s Experience Points)] >)]%r[printf($1:[ansi(hb, |)]:&s $15-&s $15&s $1:|:&s $15&-s $15&s $1:[ansi(hb, |)]:&s, %r, Available XP:%rAvailable KP:%rGained XP:, [sqlite_query(Game, select XP from Accounts where Email='[get(%q0/dat`Account)]')]%r[get(%q0/dat`kp)]%r[if([hastags(%q0, watching)], [ansi(hc, *)]%b)][get(%q0/dat`xp-gained)],%r%r, Weekly XP:%rLifetime XP:%rXP Spent, [get(%q0/dat`xp-weekly)]%r[get(%q0/dat`xp-lifetime)]%r[get(%q0/dat`XP-spent)],%r%r)]%r[printf([ansi(hb, |)]$67:-:s[ansi(hb, |)],)]%r[printf($1:[ansi(hb, |)]:&s $-65&s $1:[ansi(hb, |)]:&s,%r, XP Gauge: [if([t(%q5)], %q5, 0)], %r)]%r[printf($1:[ansi(hb, |)]:&s $13s $-51"|"s $1:[ansi(hb, |)]:&s,%r, XP Modifiers:, [Get(%q0/Dat`Xp-Gauge)],%r)]%r[printf($^69:[ansi(hb, -=)]:s, < [ansi(hw, End XP)] >)]}, @pemit %#=[prompt(game)] Enter a valid player.};@pemit %#=Huh? %b(Type "help" for help.)

&CMD`XP #60=$+XP:@pemit %#=[printf($^69:[ansi(hb, -=)]:s, < [ansi(hw, %k's Experience Points)] >)]%r[printf($1:[ansi(hb, |)]:&s $15-&s $15&s $1:|:&s $15&-s $15&s $1:[ansi(hb, |)]:&s,%r, Available XP:%rAvailable KP:, [sqlite_query(Game, select XP from Accounts where Email='[get(%#/dat`Account)]')]%r[get(%#/dat`kp)],%r, Weekly RP XP:%rLifetime RP XP:, [get(%#/dat`xp-weekly)]%r[get(%#/dat`xp-lifetime)],%r)]%r[printf($^69:[ansi(hb, -=)]:s, < [ansi(hw, End XP)] >)]

&CMD`+ACCOUNT #60=$+account:@break [hasattr(%#, dat`account)]={@pemit %#=[printf($78:[ansi(hb, -=)]:^s, < [ansi(hw, %K's Account Info)] >)]%r[printf($1&:[ansi(hb, |)]:s $74^s $1&:[ansi(hb, |)]:s,,Email: [decode64([get(%#/dat`account)])],)]%r[printf($1&:[ansi(hb,|)]:s $51-&s $1&:[ansi(hb,|)]:s $20&s $1&:[ansi(hb,|)]:s,%r%r,Approved: [elist([sqlite_query(Game, select Approved from Accounts where Email='[get(%#/dat`account)]')],,,,,[ansi(y, [name(%0)])])]%rUnapproved: [elist([sqlite_query(Game, select Unapproved from Accounts where Email='[get(%#/dat`account)]')],,,,,[ansi(y, [name(%0)])])]%rNPCs: [elist([sqlite_query(Game, select "Approved NPCs" from Accounts where Email='[get(%#/dat`account)]')],,,,,[ansi(y, [name(%0)])])],%r%r, XP: [sqlite_query(Game, select XP from Accounts where Email='[get(%#/dat`Account)]')]%rLP: [sqlite_query(Game, select LP from Accounts where Email='[get(%#/dat`account)]')]/[sqlite_query(Game, select "LP Total" from Accounts where Email='[get(%#/dat`account)]')]%rTotal XP: [sqlite_query(Game, select "Total XP" from Accounts where Email='[get(%#/dat`Account)]')],%r%r)]%r[printf($^78:[ansi(hb, -=)]:s, < [ansi(hw, End Account Info)] >)]};@pemit %#=[prompt(CG)] You don't have an account yet.

&CMD`+ACCOUNT #1223=$+account *:@assert [gte([bittype(%#)], 5)]={;@pemit %#=[error()]}; @assert [t([setr(0, [pmatch(%0)])])]={@pemit %#=[prompt(game)] Invalid player.}; @assert [hasattr(%q0, dat`account)]={@pemit %#=[prompt(game)] They don't have an account yet.}; @pemit %#=[printf($78:[ansi(hb, -=)]:^s, < [ansi(hw, [cname(%q0)]'s Account Info)] >)]%r[printf($1&:[ansi(hb,|)]:s $51-&s $1&:[ansi(hb,|)]:s $20&s $1&:[ansi(hb,|)]:s,%r%r,Approved: [elist([sqlite_query(Game, select Approved from Accounts where Email='[get(%q0/dat`account)]')],,,,,[ansi(y, [name(%0)])])]%rUnapproved: [elist([sqlite_query(Game, select Unapproved from Accounts where Email='[get(%q0/dat`account)]')],,,,,[ansi(y, [name(%0)])])]%rNPCs: [elist([sqlite_query(Game, select "Approved NPCs" from Accounts where Email='[get(%q0/dat`account)]')],,,,,[ansi(y, [name(%0)])])],%r%r, XP: [sqlite_query(Game, select XP from Accounts where Email='[get(%q0/dat`Account)]')]%rLP: [sqlite_query(Game, select LP from Accounts where Email='[get(%q0/dat`account)]')]/[sqlite_query(Game, select "LP Total" from Accounts where Email='[get(%q0/dat`account)]')]%rTotal XP: [sqlite_query(Game, select "Total XP" from Accounts where Email='[get(%q0/dat`Account)]')],%r%r)]%r[printf($^78:[ansi(hb, -=)]:s, < [ansi(hw, End Account Info)] >)]

&CMD`CG #60=$+CG:@break [gte([bittype(%#)], 2)]={@pemit %#=[prompt(game)] You cannot use that command.}; @break [gte([get(%#/dat`XP-lifetime)], 30000)]={@pemit %#=[prompt(game)] You cannot return to CG now that you have 30%,000 XP.}; @break [or([strmatch(#658, [parent(%l)])], [strmatch(#150, %l)])]={@pemit %#=[prompt(game)] You cannot use that command while in CG or waiting for approval.};@pemit %#=[prompt(Game)] You will be teleported to CG in 30 seconds. Type [ansi(hg, +CG/cancel)] if you do not want to be reset.;@set %#=dat`cg-return:1; @wait 30={@skip/ifelse [get(%#/dat`CG-Return)]={@eval [sqlite_query(Game, update Accounts set XP=[add([sqlite_query(Game, select XP from Accounts where Email='[get(%#/dat`Account)]')], -[get(%#/dat`CGXP)], [get(%#/dat`XP-spent)])] where Email='[get(%#/dat`Account)]')][setq(0, [iter([v(list`CG-keep)], [get(%#/dat`##)],,~)])][wipe(%#/dat`*)][iter([v(list`CG-keep)], [set(%#, dat`##:[elementsmux(%q0, #@, ~)])])][sqlite_query(Game, update Accounts set "Approved[if([hastags(%#, npc)], %bNPCs)]"='[remove([sqlite_query(Game, select "Approved[if([hastags(%#, npc)], %bNPCs)]" from Accounts where Email='[get(%#/dat`Account)]')], %#)]' where Email='[get(%#/dat`account)]')][sqlite_query(Game, update Accounts set "Unapproved"='[setunion([sqlite_query(Game, select "Unapproved" from Accounts where Email='[get(%#/dat`Account)]')], %#)]' where Email='[get(%#/dat`account)]')]; @cemit Monitor-App=%N has gone back to CG.; @force %#=@chan/on newbie; @tel %#=#1245; @force %#=+teststart}}

&CMD`CG-APPROVE #1223=$+cgapprove *:@assert [orslabs(%#, staff-cg)]={@pemit %#=[error()]}; @assert [t([setr(0, [pmatch(%0)])])]={@pemit %#=[prompt(CG)] Choose a valid player.}; @assert [!hasattr(%q0/dat`approval)]={@pemit %#=[prompt(Game)] That person is already approved.}; @assert [hasattr(%q0/dat`cgapprove1)]={&dat`cgapprove1 %q0=%#;@cemit monitor-app={[prompt(CG)] [ansi(hc, %K)] has approved [ansi(hy,[name(%q0)])]. They need one more staff member to approve them.}}; @assert [!strmatch([get(%q0/dat`cgapprove1)], %#)]={@pemit %#=[prompt(CG)] You cannot approve someone a second time.}; &dat`approval %q0=[name(%#)] (%#) and [name([get(%q0/dat`cgapprove1)])] ([get(%q0/dat`cgapprove1)]) - [time()]; &dat`kp %q0=[switch(1, [t([match([get(%q0/dat`flaws)], Inept)], |)], 10, [t([match([get(%q0/dat`merits)], gifted, |)])], 15, 12)];@eval [sqlite_query(Game, update Accounts set XP=[add([sqlite_query(Game, select XP from Accounts where Email='[get(%q0/dat`account)]')], [get(%q0/dat`CGXP)])] where Email='[get(%q0/dat`Account)]')];@cemit monitor-app={[prompt(CG)] [ansi(hy,[capstr(%0)])] has been approved by [ansi(hc,%K)] and [ansi(hc,[cname([get(%q0/dat`cgapprove1)])])]: [time()]};@set #658=list`cg-apps:[remove([get(#658/list`cg-apps)],%q0,|)];@eval [sqlite_query(Game, update Accounts set Unapproved='[setdiff([sqlite_query(Game, select Unapproved from Accounts where Email="[get(%q0/dat`account)]")], %q0)]' where Email="[get(%q0/dat`account)]")][sqlite_query(Game, update Accounts set "Approved[if([hasattr(%q0/dat`NPC)], %bNPCs)]"='[setunion([sqlite_query(Game, select "Approved[if([hasattr(%q0/dat`NPC)], %bNPCs)]" from Accounts where Email="[get(%q0/dat`account)]")], %q0)]' where Email="[get(%q0/dat`account)]")][settag(%q0, newplayer)]; @tel %q0=#2135;@wipe %q0/dat`cgapprove1;@wipe %q0/dat`cgrequest;@sudo *NML-Bot={mail %q0=CG Approval//You have been approved. Welcome to NML! Please take some time to read through our [ansi(hg,+help)] files. To see what channels are available to you, type [ansi(hm,@chan/list)]. We hope you enjoy your stay!}



@@ Old:
@@ &CMD`STAFF-XP #1223=$+xp *:@break [or([gte([bittype(%#)], 5)],[hasslabs(%#,staff-skill)])]={@skip/ifelse [t([setr(0, [pmatch(%0)])])]={@pemit %#=[Setq(5,[ladd(elements(u(#121/list`xp-num-mods), parse(u(%q0/dat`xp-gauge), match([u(#121/list`xp-named-mods)], ##))))])][printf($^69:[ansi(hb, -=)]:s, < [ansi(hw, [cname(%q0)]'s Experience Points)] >)]%r[printf($1:[ansi(hb, |)]:&s $15-&s $15&s $1:|:&s $15&-s $15&s $1:[ansi(hb, |)]:&s, %r, Available XP:%rAvailable KP:%rGained XP:%rTrained XP:, [get(%q0/dat`xp)]%r[get(%q0/dat`kp)]%r[if([hastags(%q0, watching)], [ansi(hc, *)]%b)][get(%q0/dat`xp-gained)]%r [get(%q0/dat`XP-trained)],%r%r, Weekly XP:%rLifetime XP:%rConverted XP:, [get(%q0/dat`xp-weekly)]%r[get(%q0/dat`xp-lifetime)]%r[mul([get(%q0/dat`LP-converted)], 500)],%r%r)]%r[printf([ansi(hb, |)]$67:-:s[ansi(hb, |)],)]%r[printf($1:[ansi(hb, |)]:&s $-65&s $1:[ansi(hb, |)]:&s,%r, XP Gauge: [if([t(%q5)], %q5, 0)], %r)]%r[printf($1:[ansi(hb, |)]:&s $13s $-51"|"s $1:[ansi(hb, |)]:&s,%r, XP Modifiers:, [Get(%q0/Dat`Xp-Gauge)],%r)]%r[printf($^69:[ansi(hb, -=)]:s, < [ansi(hw, End XP)] >)]}, @pemit %#=[prompt(game)] Enter a valid player.};@pemit %#=Huh? %b(Type "help" for help.)

@@ &CMD`+ACCOUNT #60=$+account:@break [hasattr(%#, dat`account)]={@pemit %#=[printf($78:[ansi(hb, -=)]:^s, < [ansi(hw, %K's Account Info)] >)]%r[printf($1&:[ansi(hb, |)]:s $74^s $1&:[ansi(hb, |)]:s,,Email: [decode64([get(%#/dat`account)])],)]%r[printf($1&:[ansi(hb,|)]:s $51-&s $1&:[ansi(hb,|)]:s $20&s $1&:[ansi(hb,|)]:s,%r%r,Approved: [elist([sqlite_query(Game, select Approved from Accounts where Email='[get(%#/dat`account)]')],,,,,[ansi(y, [name(%0)])])]%rUnapproved: [elist([sqlite_query(Game, select Unapproved from Accounts where Email='[get(%#/dat`account)]')],,,,,[ansi(y, [name(%0)])])]%rNPCs: [elist([sqlite_query(Game, select "Approved NPCs" from Accounts where Email='[get(%#/dat`account)]')],,,,,[ansi(y, [name(%0)])])],%r%r, %rLP: [sqlite_query(Game, select LP from Accounts where Email='[get(%#/dat`account)]')]/[sqlite_query(Game, select "LP Total" from Accounts where Email='[get(%#/dat`account)]')],%r%r)]%r[printf($^78:[ansi(hb, -=)]:s, < [ansi(hw, End Account Info)] >)]};@pemit %#=[prompt(CG)] You don't have an account yet.

@@ &CMD`CG-APPROVE #1223=$+cgapprove *:@assert [orslabs(%#, staff-cg)]={@pemit %#=[error()]}; @assert [t([setr(0, [pmatch(%0)])])]={@pemit %#=[prompt(CG)] Choose a valid player.}; @assert [!hasattr(%q0/dat`approval)]={@pemit %#=[prompt(Game)] That person is already approved.}; @assert [hasattr(%q0/dat`cgapprove1)]={&dat`cgapprove1 %q0=%#;@cemit monitor-app={[prompt(CG)] [ansi(hc, %K)] has approved [ansi(hy,[name(%q0)])]. They need one more staff member to approve them.}}; @assert [!strmatch([get(%q0/dat`cgapprove1)], %#)]={@pemit %#=[prompt(CG)] You cannot approve someone a second time.}; &dat`approval %q0=[name(%#)] (%#) and [name([get(%q0/dat`cgapprove1)])] ([get(%q0/dat`cgapprove1)]) - [time()]; &dat`kp %q0=[switch(1, [t([match([get(%q0/dat`flaws)], Inept)], |)], 10, [t([match([get(%q0/dat`merits)], gifted, |)])], 15, 12)];&dat`xp %q0=[add([get(%q0/dat`xp-lifetime)], [mul(500, [get(%q0/dat`LP-converted)])], [get(%q0/dat`cgxp)])];@cemit monitor-app={[prompt(CG)] [ansi(hy,[capstr(%0)])] has been approved by [ansi(hc,%K)] and [ansi(hc,[cname([get(%q0/dat`cgapprove1)])])]: [time()]};@set #658=list`cg-apps:[remove([get(#658/list`cg-apps)],%q0,|)];@eval [sqlite_query(Game, update Accounts set Unapproved='[setdiff([sqlite_query(Game, select Unapproved from Accounts where Email="[get(%q0/dat`account)]")], %q0)]' where Email="[get(%q0/dat`account)]")][sqlite_query(Game, update Accounts set "Approved[if([hasattr(%q0/dat`NPC)], %bNPCs)]"='[setunion([sqlite_query(Game, select "Approved[if([hasattr(%q0/dat`NPC)], %bNPCs)]" from Accounts where Email="[get(%q0/dat`account)]")], %q0)]' where Email="[get(%q0/dat`account)]")][settag(%q0, newplayer)]; @tel %q0=#2135;@wipe %q0/dat`cgapprove1;@wipe %q0/dat`cgrequest;@wipe %q0/dat`cgxp;@wipe %q0/dat`temp-xp;@sudo *NML-Bot={mail %q0=CG Approval//You have been approved. Welcome to NML! Please take some time to read through our [ansi(hg,+help)] files. To see what channels are available to you, type [ansi(hm,@chan/list)]. We hope you enjoy your stay!}

@@ &CMD`CG #60=$+CG:@break [gte([bittype(%#)], 2)]={@pemit %#=[prompt(game)] You cannot use that command.}; @break [gte([get(%#/dat`XP-lifetime)], 30000)]={@pemit %#=[prompt(game)] You cannot return to CG now that you have 30%,000 XP.}; @break [or([strmatch(#658, [parent(%l)])], [strmatch(#150, %l)])]={@pemit %#=[prompt(game)] You cannot use that command while in CG or waiting for approval.};@pemit %#=[prompt(Game)] You will be teleported to CG in 30 seconds. Type [ansi(hg, +CG/cancel)] if you do not want to be reset.;@set %#=dat`cg-return:1; @wait 30={@skip/ifelse [get(%#/dat`CG-Return)]={@eval [setq(0, [iter([v(list`CG-keep)], [get(%#/dat`##)],,~)])][wipe(%#/dat`*)][iter([v(list`CG-keep)], [set(%#, dat`##:[elementsmux(%q0, #@, ~)])])][sqlite_query(Game, update Accounts set "Approved[if([hastags(%#, npc)], %bNPCs)]"='[remove([sqlite_query(Game, select "Approved[if([hastags(%#, npc)], %bNPCs)]" from Accounts where Email='[get(%#/dat`Account)]')], %#)]' where Email='[get(%#/dat`account)]')][sqlite_query(Game, update Accounts set "Unapproved"='[setunion([sqlite_query(Game, select "Unapproved" from Accounts where Email='[get(%#/dat`Account)]')], %#)]' where Email='[get(%#/dat`account)]')]; @cemit Monitor-App=%N has gone back to CG.; @force %#=@chan/on newbie; @tel %#=#1245; @force %#=+teststart}}

@@ &CMD`XP #60=$+xp:@pemit %#=[printf($^69:[ansi(hb, -=)]:s, < [ansi(hw, %k's Experience Points)] >)]%r[printf($1:[ansi(hb, |)]:&s $15-&s $15&s $1:|:&s $15&-s $15&s $1:[ansi(hb, |)]:&s,%r, Available XP:%rAvailable KP:%rTraining XP:, [get(%#/dat`xp)]%r[get(%#/dat`kp)]%r[get(%#/dat`xp-trained)],%r, Weekly RP XP:%rLifetime RP XP:%rConverted XP:, [get(%#/dat`xp-weekly)]%r[get(%#/dat`xp-lifetime)]%r[mul([get(%#/dat`LP-converted)], 500)],%r)]%r[printf($^69:[ansi(hb, -=)]:s, < [ansi(hw, End XP)] >)]


@set #1223/cmd`LP-give=no_command
@set #1223/cmd`life-LP-give=no_command
@set #60/cmd`LP-convert=no_command
@set #60/cmd`XP-convert=no_command
@set #60/cmd`KP-convert=no_command
