@@ [sqlite_query(Game, select XP from Accounts where Email='[get(%#/dat`account)]')]


@@ LP needs to be changed
@@ &CMD`PRIMARYROLLER #2082
@@ &CMD`PRIMARYCOMBAT #2082
@@ &FUNC`MISSIONSUCCESS #2082




@@ NEW:
&CMD`EXPERTISEAPP #2134=$+Buy/Expertise *:@assert [hasattr(%#/dat`approval)]={@pemit %#=[prompt(Game)] You cannot buy things from CG.}; @break [member([get(%l/list`players)],%#)]={@pemit %#=%r%r[prompt(Game)] You cannot purchase things while in Order.%r};@assert match(get(%#/Dat`ExpertiseList),%0*,|)={@pemit %#=[prompt(Game)] You do not already have the [ansi(hr,[grab(get(#244/Dat`SpecialtyList),%0,|)])] specialty.};@assert t(match([get(#244/Dat`ArchetypeSpec)]|[get(#244/Dat`AdvancedSpec)]|[get(#244/Dat`EliteSpec)]|[get(#244/Dat`UniqueSpec)],%0,|))={@pemit %#=[prompt(Game)] [caplist(%0,,,L)] is not a Specialty.};@break gte([after(grab(get(%#/dat`expertiseList), %0*, |), ^)],2)={@pemit %#=[prompt(Game)] You cannot upgrade Expertise beyond level 2.};@assert gte([setr(0, [sqlite_query(Game, select XP from Accounts where Email='[get(%#/dat`account)]'))]],[setr(1, [switch(1, [hasattr(%#/dat`NPC)], 0, [eq([after([grab([get(%#/dat`ExpertiseList)], %0*, |)], ^)], 0)], 5000, 10000)])])={@pemit %#=[prompt(Game)] You do not have enough XP to upgrade an Expertise Level.};@assert gte(get(%#/Dat`KP),[setr(2, [if([hasattr(%#/dat`NPC)], 0, 5)])])={@pemit %#=[prompt(Game)] You do not have enough KP to upgrade an Expertise Level.};@assert gte(get(%#/Dat`ExpertiseSlots),1)={@pemit %#=[prompt(Game)] You do not have any open Expertise slots.}; @eval [sqlite_query(Game, update Accounts set XP=[sub(%q0, %q1)] where Email='[get(%#/dat`account)]')];@set %#=Dat`KP:[sub(get(%#/Dat`KP),%q2)];@set %#=Dat`ExpertiseSlots:[sub(get(%#/Dat`ExpertiseSlots),1)];@set %#=Dat`ExpertiseList:[replace(get(%#/dat`expertiseList),[match(get(%#/dat`expertiseList), %0*, |)],[before(grab(get(%#/dat`expertiseList), %0*, |), ^)]^[add(after(grab(get(%#/dat`expertiseList), %0*, |), ^),1)],|)];@pemit %#=%r[prompt(Game)] You have successfully acquired Expertise in the [ansi(hg,[grab(get(#244/Dat`SpecialtyList),%0,|)])] Specialty, raising the Expertise level to [after(grab(get(%#/dat`expertiseList), %0*, |), ^)] for %q1 XP and %q2 KP. You have [sqlite_query(Game, select XP from Accounts where Email='[get(%#/dat`Account)]')] XP and [get(%#/Dat`KP)] KP remaining.; @cemit monitor-app=[prompt(Game)] %N has purchased and upgrade to the Expertise of their [grab(get(#244/Dat`SpecialtyList),%0,|)] Specialty, raising it to level [after(grab(get(%#/dat`expertiseList), %0*, |), ^)].

&CMD`SPECIALTYAPP #2134=$+buy/specialty *:@assert [hasattr(%#/dat`approval)]={@pemit %#=[prompt(Game)] You cannot buy things from CG.}; @break [member([get(%l/list`players)],%#)]={@pemit %#=%r%r[prompt(Game)] You cannot purchase things while in Order.%r};@assert t(match([get(#244/Dat`ArchetypeSpec)]|[get(#244/Dat`AdvancedSpec)]|[get(#244/Dat`EliteSpec)]|[get(#244/Dat`UniqueSpec)],%0,|))={@pemit %#=[prompt(Game)] [caplist(%0,,,L)] is not a proper Specialty.};@assert [gte([setr(0, [sqlite_query(Game, select XP from Accounts where Email='[get(%#/dat`Account)]')])], [setr(1, [switch(1, [hasattr(%#/dat`NPC)], 0, [t([match([get(#244/dat`ArchetypeSpec)], %0, |)])], 1000, [t([match([get(#244/dat`AdvancedSpec)], %0, |)])], 2000, [t([match([get(#244/dat`EliteSpec)], %0, |)])], 3000, [t([match([get(#244/dat`UniqueSpec)], %0, |)])], 10000)])])]={@pemit %#=[prompt(Game)] You do not have enough XP.}; @assert !match(get(%#/Dat`ExpertiseList),%0*,|)={@pemit %#=[prompt(Game)] You already have the [ansi(hr,[grab(get(#244/Dat`SpecialtyList),%0,|)])] specialty.};@break [and([match([get(#244/dat`UniqueSpec)], %0, |)], [gte([words([setinter([regeditall([get(%#/dat`ExpertiseList)], %\^%[0-2%],)], [get(#244/dat`UniqueSpec)],|)], |)], 3)])]={@pemit %#=[prompt(Game)] You cannot have more than 3 Unique Specialties.} ;@assert gte(get(%#/Dat`SpecialtySlots),1)={@pemit %#=[prompt(Game)] You do not have any open specialty slots.};@assert [u(#2134/Func`SpecialtyPreReq,%0)]={@pemit %#=[prompt(Game)] You do not meet the prerequisites for the [ansi(hr,[grab(get(#244/Dat`SpecialtyList),%0,|)])] specialty.};@set %#=Dat`SpecialtySlots:[sub(get(%#/Dat`SpecialtySlots),1)];@set %#=Dat`ExpertiseList:[insert(get(%#/Dat`ExpertiseList),-1,[grab(get(#244/Dat`SpecialtyList),%0,|)]^0,|)]; @eval [sqlite_query(Game, update Accounts set XP=[sub(%q0, %q1)] where Email='[get(%#/dat`Account)]')];@set %#=dat`RPSkills:[replace([get(%#/dat`RPSkills)], [iter([get(#658/list`RPSkill-Specialties`[edit(%0, %b, -)])], [match([get(#244/dat`RPSkills)],##, |)], |)], 1, |)];@pemit %#=%r[prompt(Game)] You have successfully acquired [ansi(hg,[grab(get(#244/Dat`SpecialtyList),%0,|)])] as a specialty for %q1 XP, adding it to your Nindo! You have [sqlite_query(Game, select XP from Accounts where Email='[get(%#/dat`Account)]')] XP remaining.; @cemit monitor-app=[prompt(Game)] %N has purchased the [grab(get(#244/Dat`SpecialtyList),%0,|)] Specialty.



@@ OLD:
@@ &CMD`EXPERTISEAPP #2134=$+Buy/Expertise *:@assert [hasattr(%#/dat`approval)]={@pemit %#=[prompt(Game)] You cannot buy things from CG.}; @break [member([get(%l/list`players)],%#)]={@pemit %#=%r%r[prompt(Game)] You cannot purchase things while in Order.%r};@assert match(get(%#/Dat`ExpertiseList),%0*,|)={@pemit %#=[prompt(Game)] You do not already have the [ansi(hr,[grab(get(#244/Dat`SpecialtyList),%0,|)])] specialty.};@assert t(match([get(#244/Dat`ArchetypeSpec)]|[get(#244/Dat`AdvancedSpec)]|[get(#244/Dat`EliteSpec)]|[get(#244/Dat`UniqueSpec)],%0,|))={@pemit %#=[prompt(Game)] [caplist(%0,,,L)] is not a Specialty.};@break gte([after(grab(get(%#/dat`expertiseList), %0*, |), ^)],2)={@pemit %#=[prompt(Game)] You cannot upgrade Expertise beyond level 2.};@assert gte(get(%#/Dat`XP),[setr(1, [switch(1, [hasattr(%#/dat`NPC)], 0, [eq([after([grab([get(%#/dat`ExpertiseList)], %0*, |)], ^)], 0)], 5000, 10000)])])={@pemit %#=[prompt(Game)] You do not have enough XP to upgrade an Expertise Level.};@assert gte(get(%#/Dat`KP),[setr(2, [if([hasattr(%#/dat`NPC)], 0, 5)])])={@pemit %#=[prompt(Game)] You do not have enough KP to upgrade an Expertise Level.};@assert gte(get(%#/Dat`ExpertiseSlots),1)={@pemit %#=[prompt(Game)] You do not have any open Expertise slots.}; @set %#=Dat`XP:[sub(get(%#/Dat`XP),%q1)];@set %#=Dat`KP:[sub(get(%#/Dat`KP),%q2)];@set %#=Dat`ExpertiseSlots:[sub(get(%#/Dat`ExpertiseSlots),1)];@set %#=Dat`ExpertiseList:[replace(get(%#/dat`expertiseList),[match(get(%#/dat`expertiseList), %0*, |)],[before(grab(get(%#/dat`expertiseList), %0*, |), ^)]^[add(after(grab(get(%#/dat`expertiseList), %0*, |), ^),1)],|)];@pemit %#=%r[prompt(Game)] You have successfully acquired Expertise in the [ansi(hg,[grab(get(#244/Dat`SpecialtyList),%0,|)])] Specialty, raising the Expertise level to [after(grab(get(%#/dat`expertiseList), %0*, |), ^)] for %q1 XP and %q2 KP. You have [get(%#/Dat`XP)] XP and [get(%#/Dat`KP)] KP remaining.; @cemit monitor-app=[prompt(Game)] %N has purchased and upgrade to the Expertise of their [grab(get(#244/Dat`SpecialtyList),%0,|)] Specialty, raising it to level [after(grab(get(%#/dat`expertiseList), %0*, |), ^)].

@@ &CMD`SPECIALTYAPP #2134=$+buy/specialty *:@assert [hasattr(%#/dat`approval)]={@pemit %#=[prompt(Game)] You cannot buy things from CG.}; @break [member([get(%l/list`players)],%#)]={@pemit %#=%r%r[prompt(Game)] You cannot purchase things while in Order.%r};@assert t(match([get(#244/Dat`ArchetypeSpec)]|[get(#244/Dat`AdvancedSpec)]|[get(#244/Dat`EliteSpec)]|[get(#244/Dat`UniqueSpec)],%0,|))={@pemit %#=[prompt(Game)] [caplist(%0,,,L)] is not a proper Specialty.};@assert [gte([get(%#/dat`XP)], [setr(1, [switch(1, [hasattr(%#/dat`NPC)], 0, [t([match([get(#244/dat`ArchetypeSpec)], %0, |)])], 1000, [t([match([get(#244/dat`AdvancedSpec)], %0, |)])], 2000, [t([match([get(#244/dat`EliteSpec)], %0, |)])], 3000, [t([match([get(#244/dat`UniqueSpec)], %0, |)])], 10000)])])]={@pemit %#=[prompt(Game)] You do not have enough XP.}; @assert !match(get(%#/Dat`ExpertiseList),%0*,|)={@pemit %#=[prompt(Game)] You already have the [ansi(hr,[grab(get(#244/Dat`SpecialtyList),%0,|)])] specialty.};@break [and([match([get(#244/dat`UniqueSpec)], %0, |)], [gte([words([setinter([regeditall([get(%#/dat`ExpertiseList)], %\^%[0-2%],)], [get(#244/dat`UniqueSpec)],|)], |)], 3)])]={@pemit %#=[prompt(Game)] You cannot have more than 3 Unique Specialties.} ;@assert gte(get(%#/Dat`SpecialtySlots),1)={@pemit %#=[prompt(Game)] You do not have any open specialty slots.};@assert [u(#2134/Func`SpecialtyPreReq,%0)]={@pemit %#=[prompt(Game)] You do not meet the prerequisites for the [ansi(hr,[grab(get(#244/Dat`SpecialtyList),%0,|)])] specialty.};@set %#=Dat`SpecialtySlots:[sub(get(%#/Dat`SpecialtySlots),1)];@set %#=Dat`ExpertiseList:[insert(get(%#/Dat`ExpertiseList),-1,[grab(get(#244/Dat`SpecialtyList),%0,|)]^0,|)]; @set %#=Dat`XP:[sub(get(%#/Dat`XP),%q1)];@set %#=dat`RPSkills:[replace([get(%#/dat`RPSkills)], [iter([get(#658/list`RPSkill-Specialties`[edit(%0, %b, -)])], [match([get(#244/dat`RPSkills)],##, |)], |)], 1, |)];@pemit %#=%r[prompt(Game)] You have successfully acquired [ansi(hg,[grab(get(#244/Dat`SpecialtyList),%0,|)])] as a specialty for %q1 XP, adding it to your Nindo! You have [get(%#/Dat`XP)] XP remaining.; @cemit monitor-app=[prompt(Game)] %N has purchased the [grab(get(#244/Dat`SpecialtyList),%0,|)] Specialty.




@@ NEW:
&CMD`XP-GIVE #1223=$+gift/XP *=*:@assert [gte([bittype(%#)], 4)]={@pemit %#=[error()]}; @assert [t([setr(0, [pmatch(%0)])])]={@pemit %#=[prompt(Game)] Please choose a valid player.}; @assert [isint(%1)]={@pemit %#=[prompt(Game)] Please give a player a valid number of XP.}; @eval [sqlite_query(Game, update Accounts set XP=[add(%1, [sqlite_query(Game, select XP from Accounts where Email='[get(%q0/dat`Account)]')])] where Email='[get(%q0/dat`Account)]')];@cemit monitor-app={%k has given [ansi(y, [name(%q0)])] [ansi(hg, %1)] XP. They now have: [sqlite_query(Game, select XP from Accounts where Email='[get(%q0/dat`Account)]')] XP}; @pemit %#=[prompt(Game)] You have given [ansi(y, [name(%q0)])] [ansi(hg, %1)] XP. They now have: [sqlite_query(Game, select XP from Accounts where Email='[get(%q0/dat`Account)]')] XP

&CMD`LIFE-XP-GIVE #1223=$+gift/total *=*:@assert [gte([bittype(%#)], 5)]={@pemit %#=[error()]}; @assert [t([setr(0, [pmatch(%0)])])]={@pemit %#=[prompt(Game)] Please choose a valid player.}; @assert [isint(%1)]={@pemit %#=[prompt(Game)] Please give a player a valid number of XP.}; @eval [sqlite_query(Game, update Accounts set XP=[add(%1, [sqlite_query(Game, select XP from Accounts where Email='[get(%q0/dat`Account)]')])] where Email='[get(%q0/dat`Account)]')][sqlite_query(Game, update Accounts set "Total XP"=[add(%1, [sqlite_query(Game, select "Total XP" from Accounts where Email='[get(%q0/dat`Account)]')])] where Email='[get(%q0/dat`Account)]')];@cemit monitor-app={%k has given [ansi(y, [name(%q0)])] [ansi(hg, %1)] Total XP. They now have: [sqlite_query(Game, select XP from Accounts where Email='[get(%q0/dat`Account)]')]XP and [sqlite_query(Game, select "Total XP" from Accounts where Email='[get(%q0/dat`Account)]')] Total XP}; @pemit %#=[prompt(Game)] You have given [ansi(y, [name(%q0)])] [ansi(hg, %1)] XP. They now have: [sqlite_query(Game, select XP from Accounts where Email='[get(%q0/dat`Account)]')] XP and [sqlite_query(Game, select "Total XP" from Accounts where Email='[get(%q0/dat`Account)]')] Total XP};


@@ OLD:
@@ &CMD`XP-GIVE #1223=$+gift/XP *=*:@break [gte([bittype(%#)], 5)]={@break [t([setr(0, [pmatch(%0)])])]={@assert [isint(%1)]={@pemit %#=[prompt(Game)] Please give a player a valid number of XP.}; @eval [set(%q0, dat`XP:[add([get(%q0/dat`XP)], %1)])];@cemit monitor-app={%k has given [ansi(y, [name(%q0)])] [ansi(hg, %1)] XP. They now have: [get(%q0/dat`XP)] XP}; @pemit %#=[prompt(Game)] You have given [ansi(y, [name(%q0)])] [ansi(hg, %1)] XP. They now have: [get(%q0/dat`XP)] XP}; @pemit %#=[prompt(Game)] Please choose a valid player.}; @pemit %#=[error()]
@@ &CMD`LIFE-XP-GIVE #1223=$+gift/life *=*:@break [gte([bittype(%#)], 5)]={@break [t([setr(0, [pmatch(%0)])])]={@assert [isint(%1)]={@pemit %#=[prompt(Game)] Please give a player a valid number of XP.}; @eval [set(%q0, dat`XP-lifetime:[add([get(%q0/dat`XP-lifetime)], %1)])];@cemit monitor-app={%k has given [ansi(y, [name(%q0)])] [ansi(hg, %1)] Lifetime XP. They now have: [get(%q0/dat`XP-lifetime)] Lifetime XP}; @pemit %#=[prompt(Game)] You have given [ansi(y, [name(%q0)])] [ansi(hg, %1)] XP. They now have: [get(%q0/dat`XP-lifetime)] Lifetime XP}; @pemit %#=[prompt(Game)] Please choose a valid player.}; @pemit %#=[error()]


@set #1223/cmd`LP-give=no_command
@set #1223/cmd`life-LP-give=no_command
@set #60/cmd`LP-convert=no_command
@set #60/cmd`XP-convert=no_command
@set #60/cmd`KP-convert=no_command
